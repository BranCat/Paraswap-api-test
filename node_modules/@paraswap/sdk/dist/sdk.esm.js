import { SwapSide, ContractMethod } from 'paraswap-core';
export { ContractMethod, SwapSide } from 'paraswap-core';
import { assert } from 'ts-essentials';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

var API_URL = 'https://api.paraswap.io';

function ethersContractHasMethods(contract) {
  for (var _len = arguments.length, methods = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    methods[_key - 1] = arguments[_key];
  }

  return methods.every(function (method) {
    return typeof contract[method] === 'function';
  });
}
function assertEthersContractHasMethods(contract) {
  for (var _len2 = arguments.length, methods = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    methods[_key2 - 1] = arguments[_key2];
  }

  assert(ethersContractHasMethods.apply(void 0, [contract].concat(methods)), "Contract must have methods: " + methods.join(', '));
}
function web3ContractHasMethods(contract) {
  for (var _len3 = arguments.length, methods = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    methods[_key3 - 1] = arguments[_key3];
  }

  return methods.every(function (method) {
    return typeof contract.methods[method] === 'function';
  });
}
function assertWeb3ContractHasMethods(contract) {
  for (var _len4 = arguments.length, methods = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    methods[_key4 - 1] = arguments[_key4];
  }

  assert(web3ContractHasMethods.apply(void 0, [contract].concat(methods)), "Contract must have methods: " + methods.join(', '));
}
var objectToFilledEntries = function objectToFilledEntries(object) {
  return Object.entries(object) // removes keys with undefined values
  .filter(function (_ref) {
    var value = _ref[1];
    return value !== undefined;
  }).map(function (_ref2) {
    var key = _ref2[0],
        value = _ref2[1];
    return [key, String(value)];
  });
}; //                                                            not arrays or mappings

var constructSearchString = function constructSearchString(queryOptions) {
  var queryEntries = objectToFilledEntries(queryOptions);
  var queryString = new URLSearchParams(queryEntries).toString(); // returns empty string or `?${string}`

  return queryString && "?" + queryString;
};
var isFetcherError = function isFetcherError(error) {
  return error instanceof FetcherError;
};
var FetcherError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(FetcherError, _Error);

  function FetcherError(_ref3) {
    var _this;

    var code = _ref3.code,
        request = _ref3.request,
        response = _ref3.response,
        isAxiosError = _ref3.isAxiosError,
        message = _ref3.message;
    _this = _Error.call(this) || this; // Maintains proper stack trace for where our error was thrown (only available on V8)

    _this.code = void 0;
    _this.status = void 0;
    _this.request = void 0;
    _this.response = void 0;
    _this.isAxiosError = false;

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), FetcherError);
    }

    _this.name = _this.constructor.name;
    _this.code = code;
    _this.request = request;
    _this.isAxiosError = isAxiosError; // no response on AxiosError

    if (!response) {
      _this.message = message;
      return _assertThisInitialized(_this);
    }

    _this.response = response;
    var data = response.data,
        status = response.status;
    _this.status = status;
    _this.message = isDataWithError(data) ? data.error : message;
    return _this;
  }

  return FetcherError;
}( /*#__PURE__*/_wrapNativeSuper(Error)); // to turn `object -> Record` for indexed variable access

function isObject(obj) {
  return !!obj && typeof obj === 'object';
}

function isDataWithError(data) {
  return isObject(data) && typeof data['error'] === 'string';
}

var isFilledArray = function isFilledArray(array) {
  return array.length > 0;
};
function getRandomInt() {
  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
}
function runOnceAndCache( // can pass `(...any[]) => any but null | undefined`
func) {
  var result;
  return function () {
    var _result;

    return (_result = result) != null ? _result : result = func.apply(void 0, arguments);
  };
}

var constructGetSpender = function constructGetSpender(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var fetchURL = apiURL + "/adapters/contracts?network=" + chainId;

  var _getContracts = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {
      var data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 2:
              data = _context.sent;
              return _context.abrupt("return", data);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function _getContracts(_x) {
      return _ref2.apply(this, arguments);
    };
  }(); // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`
  // so should persist across same apiUrl & network


  var getContracts = runOnceAndCache(_getContracts);

  var getSpender = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signal) {
      var _yield$getContracts, TokenTransferProxy;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getContracts(signal);

            case 2:
              _yield$getContracts = _context2.sent;
              TokenTransferProxy = _yield$getContracts.TokenTransferProxy;
              return _context2.abrupt("return", TokenTransferProxy);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getSpender(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  var getAugustusSwapper = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signal) {
      var _yield$getContracts2, AugustusSwapper;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return getContracts(signal);

            case 2:
              _yield$getContracts2 = _context3.sent;
              AugustusSwapper = _yield$getContracts2.AugustusSwapper;
              return _context3.abrupt("return", AugustusSwapper);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function getAugustusSwapper(_x3) {
      return _ref4.apply(this, arguments);
    };
  }();

  var getAugustusRFQ = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(signal) {
      var _yield$getContracts3, AugustusRFQ;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return getContracts(signal);

            case 2:
              _yield$getContracts3 = _context4.sent;
              AugustusRFQ = _yield$getContracts3.AugustusRFQ;
              return _context4.abrupt("return", AugustusRFQ);

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function getAugustusRFQ(_x4) {
      return _ref5.apply(this, arguments);
    };
  }();

  return {
    getContracts: getContracts,
    getSpender: getSpender,
    getAugustusSwapper: getAugustusSwapper,
    getAugustusRFQ: getAugustusRFQ
  };
};

// much smaller than the whole ERC20_ABI
var MinERC20Abi = [{
  constant: false,
  inputs: [{
    name: '_spender',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}];
function approveTokenMethodFactory(contractCaller, getSpender) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount, tokenAddress, overrides, signal) {
      var spender, res;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (overrides === void 0) {
                overrides = {};
              }

              _context.next = 3;
              return getSpender(signal);

            case 3:
              spender = _context.sent;
              _context.next = 6;
              return contractCaller.transactCall({
                address: tokenAddress,
                abi: MinERC20Abi,
                contractMethod: 'approve',
                args: [spender, amount],
                overrides: overrides
              });

            case 6:
              res = _context.sent;
              return _context.abrupt("return", res);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();
}

// to allow for better versatility

var constructApproveToken = function constructApproveToken(options) {
  // getSpender is cached internally for the same instance of SDK
  // so should persist across same apiUrl & network
  var _constructGetSpender = constructGetSpender(options),
      getSpender = _constructGetSpender.getSpender;

  var approveToken = approveTokenMethodFactory(options.contractCaller, getSpender);

  var approveTokenBulk = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount, tokenAddresses, overrides, signal) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.all(tokenAddresses.map(function (tokenAddress) {
                return approveToken(amount, tokenAddress, overrides, signal);
              })));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function approveTokenBulk(_x, _x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();

  return {
    approveToken: approveToken,
    approveTokenBulk: approveTokenBulk
  };
};

var _excluded$5 = ["tokenType", "mainConnector", "connectors", "network"];
var constructToken = function constructToken(tokenProps) {
  var _tokenProps$tokenType = tokenProps.tokenType,
      tokenType = _tokenProps$tokenType === void 0 ? 'ERC20' : _tokenProps$tokenType,
      _tokenProps$mainConne = tokenProps.mainConnector,
      mainConnector = _tokenProps$mainConne === void 0 ? 'ETH' : _tokenProps$mainConne,
      _tokenProps$connector = tokenProps.connectors,
      connectorsInput = _tokenProps$connector === void 0 ? [] : _tokenProps$connector,
      _tokenProps$network = tokenProps.network,
      network = _tokenProps$network === void 0 ? 1 : _tokenProps$network,
      rest = _objectWithoutPropertiesLoose(tokenProps, _excluded$5);

  var connectors = connectorsInput.length > 0 ? connectorsInput : [mainConnector];
  return _extends({
    tokenType: tokenType,
    connectors: connectors,
    mainConnector: mainConnector,
    network: network
  }, rest);
};

var isAllowance = function isAllowance(arg) {
  return 'allowance' in arg;
};
var NOT_FOUND_RESPONSE = {
  message: 'Not Found'
};
var constructGetBalances = function constructGetBalances(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var tokensUrl = apiURL + "/users/tokens/" + chainId;

  var getBalances = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAddress, signal) {
      var fetchURL, data, tokens;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fetchURL = tokensUrl + "/" + userAddress;
              _context.next = 3;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 3:
              data = _context.sent;
              tokens = data.tokens.map(constructToken);
              return _context.abrupt("return", tokens);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getBalances(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var getBalance = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userAddress, tokenAddressOrSymbol, signal) {
      var fetchURL, data;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              fetchURL = tokensUrl + "/" + userAddress + "/" + tokenAddressOrSymbol;
              _context2.next = 3;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 3:
              data = _context2.sent;

              if (data.token) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return", NOT_FOUND_RESPONSE);

            case 6:
              return _context2.abrupt("return", constructToken(data.token));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getBalance(_x3, _x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();

  var getAllowances = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userAddress, tokenAddresses, signal) {
      var tokenAddressesLowercaseSet, balances, allowances;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              tokenAddressesLowercaseSet = new Set(tokenAddresses.map(function (address) {
                return address.toLowerCase();
              }));
              _context3.next = 3;
              return getBalances(userAddress, signal);

            case 3:
              balances = _context3.sent;
              allowances = balances.filter(function (token) {
                return tokenAddressesLowercaseSet.has(token.address.toLowerCase());
              }).map(function (_ref5) {
                var address = _ref5.address,
                    _ref5$allowance = _ref5.allowance,
                    allowance = _ref5$allowance === void 0 ? '0' : _ref5$allowance;
                return {
                  tokenAddress: address,
                  allowance: allowance
                };
              });
              return _context3.abrupt("return", allowances);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function getAllowances(_x6, _x7, _x8) {
      return _ref4.apply(this, arguments);
    };
  }();

  var getAllowance = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(userAddress, tokenAddress, signal) {
      var balanceOrNotFound, address, _balanceOrNotFound$al, allowance;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return getBalance(userAddress, tokenAddress, signal);

            case 2:
              balanceOrNotFound = _context4.sent;

              if (!('message' in balanceOrNotFound)) {
                _context4.next = 5;
                break;
              }

              return _context4.abrupt("return", balanceOrNotFound);

            case 5:
              address = balanceOrNotFound.address, _balanceOrNotFound$al = balanceOrNotFound.allowance, allowance = _balanceOrNotFound$al === void 0 ? '0' : _balanceOrNotFound$al;
              return _context4.abrupt("return", {
                tokenAddress: address,
                allowance: allowance
              });

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function getAllowance(_x9, _x10, _x11) {
      return _ref6.apply(this, arguments);
    };
  }();

  return {
    getBalance: getBalance,
    getBalances: getBalances,
    getAllowance: getAllowance,
    getAllowances: getAllowances
  };
};

var constructGetAdapters = function constructGetAdapters(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;

  function getAdapters(_x, _x2) {
    return _getAdapters.apply(this, arguments);
  }

  function _getAdapters() {
    _getAdapters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options, signal) {
      var query, fetchURL, data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // always pass explicit type to make sure UrlSearchParams are correct
              query = constructSearchString({
                network: chainId,
                namesOnly: !!options && 'namesOnly' in options ? options.namesOnly : undefined
              });
              fetchURL = apiURL + "/adapters" + ((options == null ? void 0 : options.type) === 'list' ? '/list' : '') + query;
              _context.next = 4;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 4:
              data = _context.sent;
              return _context.abrupt("return", data);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getAdapters.apply(this, arguments);
  }

  return {
    getAdapters: getAdapters
  };
};

var _excluded$4 = ["srcToken", "destToken"],
    _excluded2$2 = ["route"],
    _excluded3 = ["options"],
    _excluded4 = ["excludePricingMethods", "excludeContractMethods", "includeContractMethods", "adapterVersion", "partner", "includeDEXS", "excludeDEXS", "excludePools"];

var PricingMethod;

(function (PricingMethod) {
  PricingMethod["megapath"] = "megapath";
  PricingMethod["multipath"] = "multipath";
  PricingMethod["simplepath"] = "simplepath";
})(PricingMethod || (PricingMethod = {}));

var DEFAULT_PARTNER = 'paraswap.io';
var INVALID_ROUTE = 'Invalid Route';
var constructGetRate = function constructGetRate(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var pricesUrl = apiURL + "/prices";

  var getRate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, signal) {
      var srcToken, destToken, rest, parsedOptions, search, fetchURL, data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              srcToken = _ref2.srcToken, destToken = _ref2.destToken, rest = _objectWithoutPropertiesLoose(_ref2, _excluded$4);
              parsedOptions = commonGetRateOptionsGetter(rest); // always pass explicit type to make sure UrlSearchParams are correct

              search = constructSearchString(_extends({
                srcToken: srcToken,
                destToken: destToken,
                network: chainId
              }, parsedOptions));
              fetchURL = pricesUrl + "/" + search;
              _context.next = 6;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 6:
              data = _context.sent;
              return _context.abrupt("return", data.priceRoute);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getRate(_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  var getRateByRoute = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4, signal) {
      var route, rest, parsedOptions, _route, search, fetchURL, data;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              route = _ref4.route, rest = _objectWithoutPropertiesLoose(_ref4, _excluded2$2);

              if (!(route.length < 2)) {
                _context2.next = 3;
                break;
              }

              throw new Error(INVALID_ROUTE);

            case 3:
              parsedOptions = commonGetRateOptionsGetter(rest);
              _route = route.join('-');
              search = constructSearchString(_extends({
                route: _route,
                network: chainId
              }, parsedOptions));
              fetchURL = pricesUrl + "/" + search;
              _context2.next = 9;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 9:
              data = _context2.sent;
              return _context2.abrupt("return", data.priceRoute);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getRateByRoute(_x3, _x4) {
      return _ref5.apply(this, arguments);
    };
  }();

  return {
    getRate: getRate,
    getRateByRoute: getRateByRoute
  };
};

function commonGetRateOptionsGetter(_ref6) {
  var _ref6$options = _ref6.options,
      options = _ref6$options === void 0 ? {} : _ref6$options,
      restInput = _objectWithoutPropertiesLoose(_ref6, _excluded3);

  var excludePricingMethods = options.excludePricingMethods,
      excludeContractMethods = options.excludeContractMethods,
      includeContractMethods = options.includeContractMethods,
      adapterVersion = options.adapterVersion,
      _options$partner = options.partner,
      partner = _options$partner === void 0 ? DEFAULT_PARTNER : _options$partner,
      includeDEXS = options.includeDEXS,
      excludeDEXS = options.excludeDEXS,
      excludePools = options.excludePools,
      restOptions = _objectWithoutPropertiesLoose(options, _excluded4);

  var _map = [includeDEXS, excludeDEXS, excludePools, excludePricingMethods, excludeContractMethods, includeContractMethods //                                                                                              no "" empty string
  ].map(function (array) {
    return (array == null ? void 0 : array.join(',')) || undefined;
  }),
      _includeDEXS = _map[0],
      _excludeDEXS = _map[1],
      _excludePools = _map[2],
      _excludePricingMethods = _map[3],
      _excludeContractMethods = _map[4],
      _includeContractMethods = _map[5];

  return _extends({
    version: adapterVersion,
    excludePricingMethods: _excludePricingMethods,
    excludeContractMethods: _excludeContractMethods,
    includeContractMethods: _includeContractMethods,
    partner: partner,
    includeDEXS: _includeDEXS,
    excludeDEXS: _excludeDEXS,
    excludePools: _excludePools
  }, restInput, restOptions);
}

var constructGetTokens = function constructGetTokens(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var fetchURL = apiURL + "/tokens/" + chainId;

  var getTokens = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {
      var data, tokens;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 2:
              data = _context.sent;
              tokens = data.tokens.map(constructToken);
              return _context.abrupt("return", tokens);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getTokens(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    getTokens: getTokens
  };
};

function baseFetchUrlGetterFactory(orderKind) {
  return function constructBaseFetchUrlGetter(_ref) {
    var chainId = _ref.chainId,
        apiURL = _ref.apiURL;

    function urlGetter(type) {
      if (!type) return apiURL + "/" + orderKind + "/order";
      var orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';
      return apiURL + "/" + orderKind + "/" + orderURLpart + "/" + chainId;
    }

    return urlGetter;
  };
}

function sanitizeOrderData$1(_ref) {
  var nonceAndMeta = _ref.nonceAndMeta,
      expiry = _ref.expiry,
      makerAsset = _ref.makerAsset,
      takerAsset = _ref.takerAsset,
      maker = _ref.maker,
      taker = _ref.taker,
      makerAmount = _ref.makerAmount,
      takerAmount = _ref.takerAmount;
  return {
    nonceAndMeta: nonceAndMeta,
    expiry: expiry,
    makerAsset: makerAsset,
    takerAsset: takerAsset,
    maker: maker,
    taker: taker,
    makerAmount: makerAmount,
    takerAmount: takerAmount
  };
}
var constructBaseFetchUrlGetter$1 = /*#__PURE__*/baseFetchUrlGetterFactory('ft');

var name = 'AUGUSTUS RFQ';
var version = '1';
var ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';

var OrderNFT = [{
  name: 'nonceAndMeta',
  type: 'uint256'
}, {
  name: 'expiry',
  type: 'uint128'
}, {
  name: 'makerAsset',
  type: 'uint256'
}, {
  name: 'makerAssetId',
  type: 'uint256'
}, {
  name: 'takerAsset',
  type: 'uint256'
}, {
  name: 'takerAssetId',
  type: 'uint256'
}, {
  name: 'maker',
  type: 'address'
}, {
  name: 'taker',
  type: 'address'
}, {
  name: 'makerAmount',
  type: 'uint256'
}, {
  name: 'takerAmount',
  type: 'uint256'
}];
function buildOrderData$1(_ref) {
  var chainId = _ref.chainId,
      verifyingContract = _ref.verifyingContract,
      _ref$nonce = _ref.nonce,
      nonce = _ref$nonce === void 0 ? getRandomInt() : _ref$nonce,
      expiry = _ref.expiry,
      _makerAssetAddress = _ref.makerAsset,
      _takerAssetAddress = _ref.takerAsset,
      makerAmount = _ref.makerAmount,
      takerAmount = _ref.takerAmount,
      makerAssetId = _ref.makerAssetId,
      _ref$takerAssetId = _ref.takerAssetId,
      takerAssetId = _ref$takerAssetId === void 0 ? '0' : _ref$takerAssetId,
      makerAssetType = _ref.makerAssetType,
      takerAssetType = _ref.takerAssetType,
      maker = _ref.maker,
      AugustusAddress = _ref.AugustusAddress,
      _ref$taker = _ref.taker,
      takerInNonce = _ref$taker === void 0 ? ZERO_ADDRESS : _ref$taker;
  // first 160 bits is taker address (for p2p orders),
  // or 0 for limitOrders, so that anyone can be the taker of the Order
  var nonceAndMeta = (BigInt(takerInNonce) + (BigInt(nonce) << BigInt(160))).toString(10);
  var makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);
  var takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);
  var orderNFT = {
    nonceAndMeta: nonceAndMeta,
    expiry: expiry,
    makerAsset: makerAsset,
    takerAsset: takerAsset,
    maker: maker,
    taker: AugustusAddress,
    makerAmount: makerAmount,
    takerAmount: takerAmount,
    makerAssetId: makerAssetId,
    takerAssetId: takerAssetId
  };
  return {
    types: {
      OrderNFT: OrderNFT
    },
    domain: {
      name: name,
      version: version,
      chainId: chainId,
      verifyingContract: verifyingContract
    },
    data: orderNFT
  };
} // create a packed number that contains assetAddress and AssetType

function assetAddressToUint(assetAddress, assetType) {
  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(10);
}

// https://github.com/Microsoft/TypeScript/issues/22311
// export enum AssetType {
//   ERC20 = 0,
//   ERC1155 = 1,
//   ERC721 = 2,
// }

var AssetType = {
  ERC20: 0,
  ERC1155: 1,
  ERC721: 2
};
function sanitizeOrderData(_ref) {
  var nonceAndMeta = _ref.nonceAndMeta,
      expiry = _ref.expiry,
      _makerAsset = _ref.makerAsset,
      _takerAsset = _ref.takerAsset,
      maker = _ref.maker,
      taker = _ref.taker,
      makerAmount = _ref.makerAmount,
      takerAmount = _ref.takerAmount,
      makerAssetId = _ref.makerAssetId,
      takerAssetId = _ref.takerAssetId,
      makerAssetType = _ref.makerAssetType,
      takerAssetType = _ref.takerAssetType;
  var makerAsset = makerAssetType !== undefined && _makerAsset.startsWith('0x') ? assetAddressToUint(_makerAsset, makerAssetType) : _makerAsset;
  var takerAsset = takerAssetType !== undefined && _takerAsset.startsWith('0x') ? assetAddressToUint(_takerAsset, takerAssetType) : _takerAsset;
  return {
    nonceAndMeta: nonceAndMeta,
    expiry: expiry,
    makerAsset: makerAsset,
    takerAsset: takerAsset,
    maker: maker,
    taker: taker,
    makerAmount: makerAmount,
    takerAmount: takerAmount,
    makerAssetId: makerAssetId,
    takerAssetId: takerAssetId
  };
}
var constructBaseFetchUrlGetter = /*#__PURE__*/baseFetchUrlGetterFactory('nft');

var constructBuildTx = function constructBuildTx(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var transactionsURL = apiURL + "/transactions/" + chainId;

  var buildTx = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params, options, signal) {
      var priceRoute, side, AmountMistmatchError, search, fetchURL, sanitizedParams, fetchParams, builtTx;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }

              if ('priceRoute' in params && 'destAmount' in params && // isn't provided together with `orders`
              !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)
              ) {
                priceRoute = params.priceRoute, side = params.priceRoute.side;
                AmountMistmatchError = side === SwapSide.SELL ? 'Source Amount Mismatch' : 'Destination Amount Mismatch'; // user provides srcAmount or slippage but not both. so we only validate accordingly.

                assert(areAmountsCorrect({
                  queryParams: params,
                  side: side,
                  priceRoute: priceRoute
                }), AmountMistmatchError);
              } // always pass explicit type to make sure UrlSearchParams are correct


              search = constructSearchString(options);
              fetchURL = transactionsURL + "/" + search;
              sanitizedParams = 'orders' in params && params.orders.length > 0 ? _extends({}, params, {
                //  make sure we don't pass more with orders than API expects
                orders: params.orders.map(function (order) {
                  var sanitizedOrderData = 'makerAssetId' in order || 'takerAssetId' in order ? sanitizeOrderData(order) // assetType is provided here, because Order.*Asset may be address
                  : // if Order received from API by hash
                  sanitizeOrderData$1(order);

                  var sanitizedOrder = _extends({}, sanitizedOrderData, {
                    signature: order.signature
                  });

                  if (order.permitMakerAsset) {
                    sanitizedOrder.permitMakerAsset = order.permitMakerAsset;
                  }

                  return sanitizedOrder;
                })
              }) : params;
              fetchParams = {
                url: fetchURL,
                method: 'POST',
                data: sanitizedParams,
                signal: signal
              };
              _context.next = 8;
              return fetcher(fetchParams);

            case 8:
              builtTx = _context.sent;
              return _context.abrupt("return", builtTx);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function buildTx(_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    buildTx: buildTx
  };
};

function areAmountsCorrect(_ref3) {
  var queryParams = _ref3.queryParams,
      side = _ref3.side,
      priceRoute = _ref3.priceRoute;

  // return early after a simpler check if the user was swapping before filling
  if (queryParams.slippage) {
    return side === SwapSide.BUY && queryParams.destAmount === priceRoute.destAmount || side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount;
  } // provided amounts match the previously queried price route


  var _ref4 = side === SwapSide.SELL ? [queryParams.srcAmount, priceRoute.srcAmount] : [queryParams.destAmount, priceRoute.destAmount],
      inputAmount = _ref4[0],
      priceRouteAmount = _ref4[1];

  return inputAmount === priceRouteAmount;
}

var Order = [{
  name: 'nonceAndMeta',
  type: 'uint256'
}, {
  name: 'expiry',
  type: 'uint128'
}, {
  name: 'makerAsset',
  type: 'address'
}, {
  name: 'takerAsset',
  type: 'address'
}, {
  name: 'maker',
  type: 'address'
}, {
  name: 'taker',
  type: 'address'
}, {
  name: 'makerAmount',
  type: 'uint256'
}, {
  name: 'takerAmount',
  type: 'uint256'
}];
function buildOrderData(_ref) {
  var chainId = _ref.chainId,
      verifyingContract = _ref.verifyingContract,
      _ref$nonce = _ref.nonce,
      nonce = _ref$nonce === void 0 ? getRandomInt() : _ref$nonce,
      expiry = _ref.expiry,
      makerAsset = _ref.makerAsset,
      takerAsset = _ref.takerAsset,
      makerAmount = _ref.makerAmount,
      takerAmount = _ref.takerAmount,
      maker = _ref.maker,
      AugustusAddress = _ref.AugustusAddress,
      _ref$taker = _ref.taker,
      takerInNonce = _ref$taker === void 0 ? ZERO_ADDRESS : _ref$taker;
  // first 160 bits is taker address (for p2p orders),
  // or 0 for limitOrders, so that anyone can be the taker of the Order
  var nonceAndMeta = (BigInt(takerInNonce) + (BigInt(nonce) << BigInt(160))).toString(10); // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)
  // otherwise p2p order -> fill through Augustus only

  var taker = takerInNonce === ZERO_ADDRESS ? ZERO_ADDRESS : AugustusAddress;
  var order = {
    nonceAndMeta: nonceAndMeta,
    expiry: expiry,
    makerAsset: makerAsset,
    takerAsset: takerAsset,
    maker: maker,
    taker: taker,
    makerAmount: makerAmount,
    takerAmount: takerAmount
  };
  return {
    types: {
      Order: Order
    },
    domain: {
      name: name,
      version: version,
      chainId: chainId,
      verifyingContract: verifyingContract
    },
    data: order
  };
}

var constructBuildLimitOrder = function constructBuildLimitOrder(options) {
  var chainId = options.chainId; // getContracts is cached internally for the same instance of SDK
  // so should persist across same apiUrl & network

  var _constructGetSpender = constructGetSpender(options),
      getContracts = _constructGetSpender.getContracts;

  var buildLimitOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buildLimitOrderParams, signal) {
      var _yield$getContracts, AugustusAddress, verifyingContract;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getContracts(signal);

            case 2:
              _yield$getContracts = _context.sent;
              AugustusAddress = _yield$getContracts.AugustusSwapper;
              verifyingContract = _yield$getContracts.AugustusRFQ;
              return _context.abrupt("return", buildOrderData(_extends({}, buildLimitOrderParams, {
                chainId: chainId,
                verifyingContract: verifyingContract,
                AugustusAddress: AugustusAddress
              })));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function buildLimitOrder(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  return {
    buildLimitOrder: buildLimitOrder
  };
};

// to allow for better versatility

var constructSignLimitOrder = function constructSignLimitOrder(options) {
  var signLimitOrder = function signLimitOrder(typedData) {
    // types allow to pass OrderData & extra_stuff, but tx will break like that
    var typedDataOnly = _extends({}, typedData, {
      data: sanitizeOrderData$1(typedData.data)
    });

    return options.contractCaller.signTypedDataCall(typedDataOnly);
  };

  return {
    signLimitOrder: signLimitOrder
  };
};

var MinAugustusRFQAbi = [{
  inputs: [{
    internalType: 'bytes32',
    name: 'orderHash',
    type: 'bytes32'
  }],
  name: 'cancelOrder',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32[]',
    name: 'orderHashes',
    type: 'bytes32[]'
  }],
  name: 'cancelOrders',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}]; // returns whatever `contractCaller` returns
// to allow for better versatility

var constructCancelLimitOrder = function constructCancelLimitOrder(options) {
  // getAugustusRFQ is cached internally for the same instance of SDK
  // so should persist across same apiUrl & network
  var _constructGetSpender = constructGetSpender(options),
      getAugustusRFQ = _constructGetSpender.getAugustusRFQ;

  var cancelLimitOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(orderHash, overrides, signal) {
      var verifyingContract, res;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (overrides === void 0) {
                overrides = {};
              }

              _context.next = 3;
              return getAugustusRFQ(signal);

            case 3:
              verifyingContract = _context.sent;
              _context.next = 6;
              return options.contractCaller.transactCall({
                // @CHECK if verifyingContract is the one we need to approve
                // maybe a Proxy in-between
                address: verifyingContract,
                abi: MinAugustusRFQAbi,
                contractMethod: 'cancelOrder',
                args: [orderHash],
                overrides: overrides
              });

            case 6:
              res = _context.sent;
              return _context.abrupt("return", res);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function cancelLimitOrder(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var cancelLimitOrderBulk = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orderHashes, overrides, signal) {
      var verifyingContract, res;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (overrides === void 0) {
                overrides = {};
              }

              _context2.next = 3;
              return getAugustusRFQ(signal);

            case 3:
              verifyingContract = _context2.sent;
              _context2.next = 6;
              return options.contractCaller.transactCall({
                // @CHECK if verifyingContract is the one we need to approve
                // maybe a Proxy in-between
                address: verifyingContract,
                abi: MinAugustusRFQAbi,
                contractMethod: 'cancelOrders',
                args: [orderHashes],
                overrides: overrides
              });

            case 6:
              res = _context2.sent;
              return _context2.abrupt("return", res);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function cancelLimitOrderBulk(_x4, _x5, _x6) {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    cancelLimitOrder: cancelLimitOrder,
    cancelLimitOrderBulk: cancelLimitOrderBulk
  };
};

var constructGetLimitOrders = function constructGetLimitOrders(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var getBaseFetchURLByOrderType = constructBaseFetchUrlGetter$1({
    apiURL: apiURL,
    chainId: chainId
  });

  var getLimitOrders = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userParams, signal) {
      var baseFetchURL, userURL, offset, limit, hideSmallBalances, search, fetchURL, response;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              baseFetchURL = getBaseFetchURLByOrderType(userParams.type);
              userURL = 'maker' in userParams ? "maker/" + userParams.maker : "taker/" + userParams.taker;
              offset = userParams.offset, limit = userParams.limit, hideSmallBalances = userParams.hideSmallBalances;
              search = constructSearchString({
                offset: offset,
                limit: limit,
                hideSmallBalances: hideSmallBalances
              });
              fetchURL = baseFetchURL + "/" + userURL + search;
              _context.next = 7;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 7:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getLimitOrders(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var getLimitOrderByHash = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orderHash, signal) {
      var baseFetchURL, fetchURL, order;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              baseFetchURL = getBaseFetchURLByOrderType();
              fetchURL = baseFetchURL + "/" + orderHash;
              _context2.next = 4;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 4:
              order = _context2.sent;
              return _context2.abrupt("return", order);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getLimitOrderByHash(_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    getLimitOrders: getLimitOrders,
    getLimitOrderByHash: getLimitOrderByHash
  };
};

var constructPostLimitOrder = function constructPostLimitOrder(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var getBaseFetchURLByOrderType = constructBaseFetchUrlGetter$1({
    apiURL: apiURL,
    chainId: chainId
  });

  var postTypedOrder = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(limitOrderWithSignatureAndPermit, type, signal) {
      var fetchURL, _yield$fetcher, newOrder;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fetchURL = getBaseFetchURLByOrderType(type);
              _context.next = 3;
              return fetcher({
                url: fetchURL,
                method: 'POST',
                data: limitOrderWithSignatureAndPermit,
                signal: signal
              });

            case 3:
              _yield$fetcher = _context.sent;
              newOrder = _yield$fetcher.order;
              return _context.abrupt("return", newOrder);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function postTypedOrder(_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  var postLimitOrder = function postLimitOrder(limitOrderWithSignatureAndPermit, signal) {
    return postTypedOrder(limitOrderWithSignatureAndPermit, 'LIMIT', signal);
  };

  var postP2POrder = function postP2POrder(limitOrderWithSignatureAndPermit, signal) {
    return postTypedOrder(limitOrderWithSignatureAndPermit, 'P2P', signal);
  };

  return {
    postLimitOrder: postLimitOrder,
    postP2POrder: postP2POrder
  };
};

// to allow for better versatility

var constructApproveTokenForLimitOrder = function constructApproveTokenForLimitOrder(options) {
  // getAugustusRFQ is cached internally for the same instance of SDK
  // so should persist across same apiUrl & network
  var _constructGetSpender = constructGetSpender(options),
      getAugustusRFQ = _constructGetSpender.getAugustusRFQ;

  var approveMakerTokenForLimitOrder = approveTokenMethodFactory(options.contractCaller, getAugustusRFQ); // approving TokenTransaferProxy as for the swap

  var _constructApproveToke = constructApproveToken(options),
      approveTakerTokenForLimitOrder = _constructApproveToke.approveToken;

  return {
    approveMakerTokenForLimitOrder: approveMakerTokenForLimitOrder,
    approveTakerTokenForLimitOrder: approveTakerTokenForLimitOrder
  };
};

var constructGetLimitOrdersContract = function constructGetLimitOrdersContract(options) {
  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ
  var _constructGetSpender = constructGetSpender(options),
      getTokenTransferProxy = _constructGetSpender.getSpender,
      getLimitOrdersContract = _constructGetSpender.getAugustusRFQ;

  return {
    getLimitOrdersContract: getLimitOrdersContract,
    getTokenTransferProxy: getTokenTransferProxy
  };
};

var _excluded$3 = ["srcToken", "destToken", "amount", "options"];
var constructBuildLimitOrderTx = function constructBuildLimitOrderTx(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;

  var _constructBuildTx = constructBuildTx({
    apiURL: apiURL,
    chainId: chainId,
    fetcher: fetcher
  }),
      buildSwapTx = _constructBuildTx.buildTx;

  var _constructGetRate = constructGetRate({
    apiURL: apiURL,
    chainId: chainId,
    fetcher: fetcher
  }),
      getSwapAndLimitOrderRate = _constructGetRate.getRate; //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders


  var getLimitOrdersRate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, orders, signal) {
      var srcToken, destToken, amount, _ref2$options, _options, rest, _checkAndParseOrders, totalTakerAmount, takerAsset, takerAmountString, options, side, rateInput, optimalRate;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              srcToken = _ref2.srcToken, destToken = _ref2.destToken, amount = _ref2.amount, _ref2$options = _ref2.options, _options = _ref2$options === void 0 ? {} : _ref2$options, rest = _objectWithoutPropertiesLoose(_ref2, _excluded$3);
              assert(orders.length > 0, 'must pass at least 1 order');
              _checkAndParseOrders = checkAndParseOrders$1(orders), totalTakerAmount = _checkAndParseOrders.totalTakerAmount, takerAsset = _checkAndParseOrders.takerAsset;
              assert(takerAsset.toLowerCase() === destToken.toLowerCase(), 'All orders must have the same takerAsset as destToken');
              takerAmountString = totalTakerAmount.toString(10);

              if (amount) {
                assert(amount === takerAmountString, "`amount` must equal the total of the orders' `takerAmounts`");
              } // The pricing must use includeContractMethods=simpleBuy and side=BUY


              options = _extends({}, _options, {
                includeContractMethods: [ContractMethod.simpleBuy]
              });
              side = SwapSide.BUY;
              rateInput = _extends({}, rest, {
                srcToken: srcToken,
                destToken: destToken,
                amount: takerAmountString,
                side: side,
                options: options
              }); // priceRoute

              _context.next = 11;
              return getSwapAndLimitOrderRate(rateInput, signal);

            case 11:
              optimalRate = _context.sent;
              return _context.abrupt("return", optimalRate);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getLimitOrdersRate(_x, _x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }(); // derive srcToken, destToken and srcAmount from orders[]


  var buildLimitOrderTx = function buildLimitOrderTx(params, options, signal) {
    var _checkAndParseOrders2 = checkAndParseOrders$1(params.orders),
        makerAsset = _checkAndParseOrders2.makerAsset,
        takerAsset = _checkAndParseOrders2.takerAsset,
        totalTakerAmount = _checkAndParseOrders2.totalTakerAmount;

    var fillParams = _extends({}, params, {
      // taker supplies takerAsset
      srcToken: takerAsset,
      // no `slippage` in `params`
      srcAmount: totalTakerAmount.toString(10),
      // taker gets makerAsset in the end
      destToken: makerAsset
    });

    return buildSwapTx(fillParams, options, signal);
  };

  var buildSwapAndLimitOrderTx = function buildSwapAndLimitOrderTx(params, options, signal) {
    var _checkAndParseOrders3 = checkAndParseOrders$1(params.orders),
        makerAsset = _checkAndParseOrders3.makerAsset;

    var fillParams = _extends({}, params, {
      // taker supplies srcToken
      srcToken: params.priceRoute.srcToken,
      // which is swapped for makerAsset, that would go towards filling the orders
      destToken: makerAsset,
      destDecimals: params.priceRoute.destDecimals
    }, params.slippage ? {
      slippage: params.slippage
    } : //                                        may sneak in as part of `params`
    {
      srcAmount: params.priceRoute.srcAmount,
      slippage: undefined
    });

    return buildSwapTx(fillParams, options, signal);
  };

  return {
    getLimitOrdersRate: getLimitOrdersRate,
    buildLimitOrderTx: buildLimitOrderTx,
    buildSwapAndLimitOrderTx: buildSwapAndLimitOrderTx
  };
};

function checkAndParseOrders$1(orders) {
  assert(isFilledArray(orders), 'must pass at least 1 order');

  var _orders$reduce = orders.reduce(function (accum, order) {
    accum.takerAssetsSet.add(order.takerAsset.toLowerCase());
    accum.makerAssetsSet.add(order.makerAsset.toLowerCase());
    accum.totalTakerAmount = accum.totalTakerAmount + BigInt(order.takerAmount);
    return accum;
  }, {
    takerAssetsSet: new Set(),
    makerAssetsSet: new Set(),
    totalTakerAmount: BigInt(0)
  }),
      takerAssetsSet = _orders$reduce.takerAssetsSet,
      makerAssetsSet = _orders$reduce.makerAssetsSet,
      totalTakerAmount = _orders$reduce.totalTakerAmount;

  assert(takerAssetsSet.size === 1, 'All orders must have the same takerAsset as destToken');
  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');
  var _orders$ = orders[0],
      maker = _orders$.maker,
      taker = _orders$.taker,
      makerAsset = _orders$.makerAsset,
      takerAsset = _orders$.takerAsset;
  return {
    totalTakerAmount: totalTakerAmount,
    maker: maker,
    taker: taker,
    makerAsset: makerAsset,
    takerAsset: takerAsset
  };
}

var constructBuildNFTOrder = function constructBuildNFTOrder(options) {
  var chainId = options.chainId; // getContracts is cached internally for the same instance of SDK
  // so should persist across same apiUrl & network

  var _constructGetSpender = constructGetSpender(options),
      getContracts = _constructGetSpender.getContracts;

  var buildNFTOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buildNFTOrderParams, signal) {
      var _yield$getContracts, AugustusAddress, verifyingContract;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getContracts(signal);

            case 2:
              _yield$getContracts = _context.sent;
              AugustusAddress = _yield$getContracts.AugustusSwapper;
              verifyingContract = _yield$getContracts.AugustusRFQ;
              return _context.abrupt("return", buildOrderData$1(_extends({}, buildNFTOrderParams, {
                chainId: chainId,
                verifyingContract: verifyingContract,
                AugustusAddress: AugustusAddress
              })));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function buildNFTOrder(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  return {
    buildNFTOrder: buildNFTOrder
  };
};

// to allow for better versatility

var constructSignNFTOrder = function constructSignNFTOrder(options) {
  var signNFTOrder = function signNFTOrder(typedData) {
    // types allow to pass OrderData & extra_stuff, but tx will break like that
    var typedDataOnly = _extends({}, typedData, {
      // here assetType isn't provided, SignableData must already have corrent BigIntAsString
      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code
      data: sanitizeOrderData(typedData.data)
    });

    return options.contractCaller.signTypedDataCall(typedDataOnly);
  };

  return {
    signNFTOrder: signNFTOrder
  };
};

var constructCancelNFTOrder = function constructCancelNFTOrder(options) {
  var _constructCancelLimit = constructCancelLimitOrder(options),
      cancelLimitOrder = _constructCancelLimit.cancelLimitOrder,
      cancelLimitOrderBulk = _constructCancelLimit.cancelLimitOrderBulk;

  return {
    cancelNFTOrder: cancelLimitOrder,
    cancelNFTOrderBulk: cancelLimitOrderBulk
  };
};

var constructGetNFTOrders = function constructGetNFTOrders(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({
    apiURL: apiURL,
    chainId: chainId
  });

  var getNFTOrders = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userParams, signal) {
      var baseFetchURL, userURL, fetchURL, response;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              baseFetchURL = getBaseFetchURLByOrderType(userParams.type);
              userURL = 'maker' in userParams ? "maker/" + userParams.maker : "taker/" + userParams.taker;
              fetchURL = baseFetchURL + "/" + userURL;
              _context.next = 5;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 5:
              response = _context.sent;
              return _context.abrupt("return", response);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getNFTOrders(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var getNFTOrderByHash = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orderHash, signal) {
      var baseFetchURL, fetchURL, order;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              baseFetchURL = getBaseFetchURLByOrderType();
              fetchURL = baseFetchURL + "/" + orderHash;
              _context2.next = 4;
              return fetcher({
                url: fetchURL,
                method: 'GET',
                signal: signal
              });

            case 4:
              order = _context2.sent;
              return _context2.abrupt("return", order);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getNFTOrderByHash(_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    getNFTOrders: getNFTOrders,
    getNFTOrderByHash: getNFTOrderByHash
  };
};

var constructPostNFTOrder = function constructPostNFTOrder(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;
  var getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({
    apiURL: apiURL,
    chainId: chainId
  });

  var postTypedOrder = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(NFTOrderWithSignatureAndPermit, type, signal) {
      var fetchURL, _yield$fetcher, newOrder;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fetchURL = getBaseFetchURLByOrderType(type); // @TODO check API return matches

              _context.next = 3;
              return fetcher({
                url: fetchURL,
                method: 'POST',
                data: NFTOrderWithSignatureAndPermit,
                signal: signal
              });

            case 3:
              _yield$fetcher = _context.sent;
              newOrder = _yield$fetcher.order;
              return _context.abrupt("return", _extends({}, newOrder));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function postTypedOrder(_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  var postNFTLimitOrder = function postNFTLimitOrder(NFTOrderWithSignatureAndPermit, signal) {
    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'LIMIT', signal);
  };

  var postNFTP2POrder = function postNFTP2POrder(NFTOrderWithSignatureAndPermit, signal) {
    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', signal);
  };

  return {
    postNFTLimitOrder: postNFTLimitOrder,
    postNFTP2POrder: postNFTP2POrder
  };
};

var constructGetNFTOrdersContract = function constructGetNFTOrdersContract(options) {
  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ
  var _constructGetSpender = constructGetSpender(options),
      getTokenTransferProxy = _constructGetSpender.getSpender,
      getNFTOrdersContract = _constructGetSpender.getAugustusRFQ;

  return {
    getNFTOrdersContract: getNFTOrdersContract,
    getTokenTransferProxy: getTokenTransferProxy
  };
};

var MinNFTAbi = [{
  constant: false,
  inputs: [{
    name: '_operator',
    type: 'address'
  }, {
    name: '_approved',
    type: 'bool'
  }],
  name: 'setApprovalForAll',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}]; // returns whatever `contractCaller` returns
// to allow for better versatility

var constructApproveTokenForNFTOrder = function constructApproveTokenForNFTOrder(options) {
  // approving TokenTransaferProxy as for the swap
  var _constructApproveToke = constructApproveToken(options),
      approveERC20ForNFTOrder = _constructApproveToke.approveToken;

  var _constructGetNFTOrder = constructGetNFTOrdersContract(options),
      getNFTOrdersContract = _constructGetNFTOrder.getNFTOrdersContract; // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps


  var AugustusRFQ = getNFTOrdersContract();

  var approveNFTorNFTOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAddress, overrides) {
      var res;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (overrides === void 0) {
                overrides = {};
              }

              _context.next = 3;
              return options.contractCaller.transactCall({
                address: tokenAddress,
                abi: MinNFTAbi,
                contractMethod: 'setApprovalForAll',
                args: [AugustusRFQ, true],
                overrides: overrides
              });

            case 3:
              res = _context.sent;
              return _context.abrupt("return", res);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function approveNFTorNFTOrder(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  return {
    approveERC20ForNFTOrder: approveERC20ForNFTOrder,
    approveNFTorNFTOrder: approveNFTorNFTOrder
  };
};

var _excluded$2 = ["srcToken", "destToken", "amount", "options"];
var constructBuildNFTOrderTx = function constructBuildNFTOrderTx(_ref) {
  var _ref$apiURL = _ref.apiURL,
      apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
      chainId = _ref.chainId,
      fetcher = _ref.fetcher;

  var _constructBuildTx = constructBuildTx({
    apiURL: apiURL,
    chainId: chainId,
    fetcher: fetcher
  }),
      buildSwapTx = _constructBuildTx.buildTx;

  var _constructGetRate = constructGetRate({
    apiURL: apiURL,
    chainId: chainId,
    fetcher: fetcher
  }),
      getSwapAndNFTOrderRate = _constructGetRate.getRate; //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders


  var getNFTOrdersRate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2, orders, signal) {
      var srcToken, destToken, amount, _ref2$options, _options, rest, _checkAndParseOrders, totalTakerAmount, takerAsset, takerAmountString, options, side, rateInput, optimalRate;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              srcToken = _ref2.srcToken, destToken = _ref2.destToken, amount = _ref2.amount, _ref2$options = _ref2.options, _options = _ref2$options === void 0 ? {} : _ref2$options, rest = _objectWithoutPropertiesLoose(_ref2, _excluded$2);
              assert(orders.length > 0, 'must pass at least 1 order');
              _checkAndParseOrders = checkAndParseOrders(orders), totalTakerAmount = _checkAndParseOrders.totalTakerAmount, takerAsset = _checkAndParseOrders.takerAsset;
              assert(takerAsset.toLowerCase() === destToken.toLowerCase(), 'All orders must have the same takerAsset as destToken');
              takerAmountString = totalTakerAmount.toString(10);

              if (amount) {
                assert(amount === takerAmountString, "`amount` must equal the total of the orders' `takerAmounts`");
              } // The pricing must use includeContractMethods=simpleBuy and side=BUY


              options = _extends({}, _options, {
                includeContractMethods: [ContractMethod.simpleBuy]
              });
              side = SwapSide.BUY;
              rateInput = _extends({}, rest, {
                srcToken: srcToken,
                destToken: destToken,
                amount: takerAmountString,
                side: side,
                options: options
              }); // priceRoute

              _context.next = 11;
              return getSwapAndNFTOrderRate(rateInput, signal);

            case 11:
              optimalRate = _context.sent;
              return _context.abrupt("return", optimalRate);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getNFTOrdersRate(_x, _x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }(); // derive srcToken, destToken and srcAmount from orders[]


  var buildNFTOrderTx = function buildNFTOrderTx(params, options, signal) {
    var _checkAndParseOrders2 = checkAndParseOrders(params.orders),
        takerAsset = _checkAndParseOrders2.takerAsset,
        totalTakerAmount = _checkAndParseOrders2.totalTakerAmount;

    var fillParams = _extends({}, params, {
      // taker supplies takerAsset
      srcToken: takerAsset,
      srcAmount: totalTakerAmount.toString(10),
      // taker gets makerAsset in the end
      destToken: 'NFT' // support any NFT

    });

    return buildSwapTx(fillParams, options, signal);
  };

  var buildSwapAndNFTOrderTx = function buildSwapAndNFTOrderTx(params, options, signal) {
    checkAndParseOrders(params.orders);

    var fillParams = _extends({}, params, {
      // taker supplies srcToken
      srcToken: params.priceRoute.srcToken
    }, params.slippage ? {
      slippage: params.slippage
    } : //                                        may sneak in as part of `params`
    {
      srcAmount: params.priceRoute.srcAmount,
      slippage: undefined
    }, {
      destToken: 'NFT',
      destDecimals: params.priceRoute.destDecimals
    });

    return buildSwapTx(fillParams, options, signal);
  };

  return {
    getNFTOrdersRate: getNFTOrdersRate,
    buildNFTOrderTx: buildNFTOrderTx,
    buildSwapAndNFTOrderTx: buildSwapAndNFTOrderTx
  };
};

function checkAndParseOrders(orders) {
  assert(isFilledArray(orders), 'must pass at least 1 order');

  var _orders$reduce = orders.reduce(function (accum, order) {
    accum.takerAssetsSet.add(order.takerAsset.toLowerCase());
    accum.makerAssetsSet.add(order.makerAsset.toLowerCase());
    accum.totalTakerAmount = accum.totalTakerAmount + BigInt(order.takerAmount);
    return accum;
  }, {
    takerAssetsSet: new Set(),
    makerAssetsSet: new Set(),
    totalTakerAmount: BigInt(0)
  }),
      takerAssetsSet = _orders$reduce.takerAssetsSet,
      makerAssetsSet = _orders$reduce.makerAssetsSet,
      totalTakerAmount = _orders$reduce.totalTakerAmount;

  assert(takerAssetsSet.size === 1, 'All orders must have the same takerAsset as destToken');
  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');
  var _orders$ = orders[0],
      maker = _orders$.maker,
      taker = _orders$.taker,
      makerAsset = _orders$.makerAsset,
      takerAsset = _orders$.takerAsset;
  return {
    totalTakerAmount: totalTakerAmount,
    maker: maker,
    taker: taker,
    makerAsset: makerAsset.startsWith('0x') ? makerAsset : uintToAssetAddress(makerAsset),
    takerAsset: takerAsset.startsWith('0x') ? takerAsset : uintToAssetAddress(takerAsset)
  };
} // extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType


function uintToAssetAddress(assetUint) {
  return '0x' + (BigInt(assetUint) & (BigInt(1) << BigInt(160)) - BigInt(1)).toString(16);
}

var constructFetcher$1 = function constructFetcher(axios) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var _yield$axios$request, data;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return axios.request(params);

            case 3:
              _yield$axios$request = _context.sent;
              data = _yield$axios$request.data;
              return _context.abrupt("return", data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);

              if (!axios.isAxiosError(_context.t0)) {
                _context.next = 12;
                break;
              }

              throw new FetcherError(_context.t0);

            case 12:
              throw _context.t0;

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var constructFetcher = function constructFetcher(fetch) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var url, method, signal, body, headers, response, data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              url = params.url, method = params.method, signal = params.signal;
              body = method === 'POST' ? JSON.stringify(params.data) : null;
              headers = method === 'POST' && body ? {
                'Content-Type': 'application/json'
              } : undefined;
              _context.next = 6;
              return fetch(url, {
                method: method,
                body: body,
                signal: signal,
                headers: headers
              });

            case 6:
              response = _context.sent;
              _context.next = 9;
              return response.json();

            case 9:
              data = _context.sent;

              if (response.ok) {
                _context.next = 12;
                break;
              }

              throw new FetcherError({
                code: String(response.status),
                response: {
                  data: data,
                  status: response.status,
                  statusText: response.statusText,
                  headers: Object.fromEntries(response.headers.entries()),
                  config: {
                    url: url,
                    method: method
                  }
                },
                message: response.statusText,
                isAxiosError: false
              });

            case 12:
              return _context.abrupt("return", data);

            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](0);

              if (!(_context.t0 instanceof FetcherError)) {
                _context.next = 19;
                break;
              }

              throw _context.t0;

            case 19:
              throw new FetcherError(_context.t0);

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 15]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var _excluded$1 = ["block", "gas"],
    _excluded2$1 = ["gas", "from"];
var constructContractCaller$1 = function constructContractCaller(_ref, account) {
  var providerOrSigner = _ref.ethersProviderOrSigner,
      Contract = _ref.EthersContract;

  var staticCall = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var _contract$callStatic;

      var address, abi, contractMethod, args, overrides, contract, block, gas, restOverrides, normalizedOverrides, callOverrides;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              address = params.address, abi = params.abi, contractMethod = params.contractMethod, args = params.args, overrides = params.overrides;
              contract = new Contract(address, abi, providerOrSigner);
              assertEthersContractHasMethods(contract, contractMethod); // drop keys not in CallOverrides

              block = overrides.block, gas = overrides.gas, restOverrides = _objectWithoutPropertiesLoose(overrides, _excluded$1); // reassign values to keys in CallOverrides

              normalizedOverrides = _extends({}, restOverrides, {
                blockTag: block,
                gasLimit: gas
              }); // enforce overrides shape ethers accepts
              // TS will break if normalizedOverrides type has any keys not also present in CallOverrides

              callOverrides = normalizedOverrides; // returns whatever the Contract.method returns: BigNumber, string, boolean

              return _context.abrupt("return", (_contract$callStatic = contract.callStatic)[contractMethod].apply(_contract$callStatic, args.concat([callOverrides])));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function staticCall(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  var transactCall = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var address, abi, contractMethod, args, overrides, signer, contract, gas, restOverrides, normalizedOverrides, txOverrides, txResponse;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              assert(account, 'account must be specified to create a signer');
              assert(isEthersProviderWithSigner(providerOrSigner) || isEthersSigner(providerOrSigner), 'ethers must be an instance of Signer or JsonRpcProvider to create a signer');
              address = params.address, abi = params.abi, contractMethod = params.contractMethod, args = params.args, overrides = params.overrides;
              signer = 'getSigner' in providerOrSigner ? providerOrSigner.getSigner(account) : providerOrSigner;
              contract = new Contract(address, abi, signer);
              assertEthersContractHasMethods(contract, contractMethod); // drop keys not in PayableOverrides

              gas = overrides.gas, restOverrides = _objectWithoutPropertiesLoose(overrides, _excluded2$1); // reassign values to keys in PayableOverrides

              normalizedOverrides = _extends({}, restOverrides, {
                gasLimit: gas
              }); // enforce overrides shape ethers accepts
              // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides

              txOverrides = normalizedOverrides;
              _context2.next = 11;
              return contract[contractMethod].apply(contract, args.concat([txOverrides]));

            case 11:
              txResponse = _context2.sent;
              return _context2.abrupt("return", txResponse);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function transactCall(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  var signTypedDataCall = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(typedData) {
      var signer, data, domain, types;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              assert(account, 'account must be specified to create a signer');
              assert(isEthersProviderWithSigner(providerOrSigner) || isEthersSigner(providerOrSigner), 'ethers must be an instance of Signer or JsonRpcProvider to create a signer');
              signer = 'getSigner' in providerOrSigner ? providerOrSigner.getSigner(account) : providerOrSigner;
              assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');
              data = typedData.data, domain = typedData.domain, types = typedData.types;
              return _context3.abrupt("return", signer._signTypedData(domain, types, data));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function signTypedDataCall(_x3) {
      return _ref4.apply(this, arguments);
    };
  }();

  return {
    staticCall: staticCall,
    transactCall: transactCall,
    signTypedDataCall: signTypedDataCall
  };
};

function isEthersProvider(providerOrSigner) {
  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;
}

function isEthersProviderWithSigner(providerOrSigner) {
  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;
}

function isEthersSigner(providerOrSigner) {
  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;
}

function isTypedDataCapableSigner(signer) {
  return '_signTypedData' in signer;
}

var _excluded = ["block", "gas"],
    _excluded2 = ["gas", "from"];
var constructContractCaller = function constructContractCaller(web3, account) {
  var staticCall = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var _contract$methods;

      var address, abi, contractMethod, args, overrides, contract, gas, restOverrides, normalizedOverrides;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              assert(web3.currentProvider, 'web3.currentProvider is not set');
              address = params.address, abi = params.abi, contractMethod = params.contractMethod, args = params.args, overrides = params.overrides;
              contract = new web3.eth.Contract(abi, // FIXME abi types ethers dependant
              address);
              assertWeb3ContractHasMethods(contract, contractMethod);
              gas = overrides.gas, restOverrides = _objectWithoutPropertiesLoose(overrides, _excluded);
              normalizedOverrides = _extends({}, restOverrides, {
                gas: gas
              });
              return _context.abrupt("return", (_contract$methods = contract.methods)[contractMethod].apply(_contract$methods, args).call(normalizedOverrides));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function staticCall(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var transactCall = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var _contract$methods2;

      var address, abi, contractMethod, args, overrides, contract, gas, from, restOverrides, _from, normalizedOverrides, preparedCall, promiEvent, unpromiEvent;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              assert(web3.currentProvider, 'web3.currentProvider is not set');
              assert(account, 'account must be specified to send transactions');
              address = params.address, abi = params.abi, contractMethod = params.contractMethod, args = params.args, overrides = params.overrides;
              contract = new web3.eth.Contract(abi, // FIXME
              address);
              assertWeb3ContractHasMethods(contract, contractMethod);
              gas = overrides.gas, from = overrides.from, restOverrides = _objectWithoutPropertiesLoose(overrides, _excluded2);
              _from = from || account;
              assert(_from, 'from is required');
              normalizedOverrides = _extends({}, restOverrides, {
                from: _from,
                gas: gas
              });
              preparedCall = (_contract$methods2 = contract.methods)[contractMethod].apply(_contract$methods2, args);
              promiEvent = preparedCall.send(normalizedOverrides); // can't just return promiEvent, because async function returns a Promise<PromiEvent>
              // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,
              // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once
              // so that functionality becomes lost
              // transactCall can be made sync, but approve has to be async to await getSpender()

              unpromiEvent = {
                on: promiEvent.on.bind(promiEvent),
                once: promiEvent.once.bind(promiEvent)
              };
              return _context2.abrupt("return", unpromiEvent);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function transactCall(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var signTypedDataCall = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(typedData) {
      var provider, data, domain, types, _typedData, response;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              assert(web3.currentProvider, 'web3.currentProvider is not set');
              assert(account, 'account must be specified to sign data');
              provider = web3.currentProvider;
              assert(isProviderWithSendMethod(provider), 'web3.currentProvider needs to be capable of sending arbitrary rpc calls');
              data = typedData.data, domain = typedData.domain, types = typedData.types;
              _typedData = {
                types: _extends({
                  EIP712Domain: [{
                    name: 'name',
                    type: 'string'
                  }, {
                    name: 'version',
                    type: 'string'
                  }, {
                    name: 'chainId',
                    type: 'uint256'
                  }, {
                    name: 'verifyingContract',
                    type: 'address'
                  }]
                }, types),
                primaryType: findPrimaryType(types),
                domain: domain,
                message: data
              };
              _context3.next = 8;
              return new Promise(function (resolve, reject) {
                provider.send({
                  jsonrpc: '2.0',
                  // method: 'eth_signTypedData_v4',
                  method: 'eth_signTypedData',
                  params: [account, _typedData]
                }, function (error, result) {
                  if (error) return reject(error);

                  if (!result) {
                    throw new Error('No result in response to eth_signTypedData');
                  }

                  resolve(result);
                });
              });

            case 8:
              response = _context3.sent;
              return _context3.abrupt("return", response.result);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function signTypedDataCall(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    staticCall: staticCall,
    transactCall: transactCall,
    signTypedDataCall: signTypedDataCall
  };
};

function isProviderWithSendMethod(provider) {
  return !!provider && typeof provider === 'object' && 'send' in provider;
} // regex from @ethersproject/hash TypedDataEncoder.constructor
// may be overly strict, but reliable


var baseTypeRegex = /^([^\x5b]*)(\x5b|$)/;

function findPrimaryType(types) {
  var candidates = Object.keys(types);
  var candidatesSet = new Set(candidates);
  candidates.forEach(function (candidate) {
    var typedDataFields = types[candidate];
    if (!typedDataFields) return;
    typedDataFields.forEach(function (_ref4) {
      var _type$match;

      var type = _ref4.type;
      // Get the base type (drop any array specifiers)
      var baseType = (_type$match = type.match(baseTypeRegex)) == null ? void 0 : _type$match[1];
      if (!baseType) return; // if type was referred to as a child of another type, it can't be the primaryType

      candidatesSet["delete"](baseType);
    });
  });

  var _Array$from = Array.from(candidatesSet),
      primaryType = _Array$from[0];

  assert(primaryType, "No primary type found in SignableTypedData types, " + JSON.stringify(types));
  return primaryType;
}

/** @description construct composable SDK with methods you choose yourself */
var constructPartialSDK = function constructPartialSDK(config) {
  for (var _len = arguments.length, funcs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    funcs[_key - 1] = arguments[_key];
  }

  var sdkFuncs = funcs.reduce(function (accum, func) {
    var sdkSlice = func(config);
    return Object.assign(accum, sdkSlice);
  }, {});
  return sdkFuncs;
};

/** @description construct SDK with every Swap-related method, fetching from API and token approval */

var constructSwapSDK = function constructSwapSDK(config) {
  return (// include all available Swap methods
    constructPartialSDK(config, constructGetBalances, constructGetTokens, constructGetSpender, constructApproveToken, // @TODO try Instantiation Expression when TS 4.7 `as constructApproveToken<TxResponse>`
    constructBuildTx, constructGetAdapters, constructGetRate)
  );
};

var constructSubmitLimitOrder = function constructSubmitLimitOrder(options) {
  var _constructBuildLimitO = constructBuildLimitOrder(options),
      buildLimitOrder = _constructBuildLimitO.buildLimitOrder;

  var _constructSignLimitOr = constructSignLimitOrder(options),
      signLimitOrder = _constructSignLimitOr.signLimitOrder;

  var _constructPostLimitOr = constructPostLimitOrder(options),
      postLimitOrder = _constructPostLimitOr.postLimitOrder,
      postP2POrder = _constructPostLimitOr.postP2POrder;

  var prepareLimitOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buildLimitOrderParams, extra) {
      var orderData, signature, orderWithSignature;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return buildLimitOrder(buildLimitOrderParams);

            case 2:
              orderData = _context.sent;
              _context.next = 5;
              return signLimitOrder(orderData);

            case 5:
              signature = _context.sent;
              orderWithSignature = _extends({}, orderData.data, extra, {
                signature: signature
              });
              return _context.abrupt("return", orderWithSignature);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function prepareLimitOrder(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var submitLimitOrder = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buildLimitOrderParams, extra, signal) {
      var orderWithSignature, newOrder;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (extra === void 0) {
                extra = {};
              }

              _context2.next = 3;
              return prepareLimitOrder(buildLimitOrderParams, extra);

            case 3:
              orderWithSignature = _context2.sent;
              _context2.next = 6;
              return postLimitOrder(orderWithSignature, signal);

            case 6:
              newOrder = _context2.sent;
              return _context2.abrupt("return", newOrder);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function submitLimitOrder(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  var submitP2POrder = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buildLimitOrderParams, extra, signal) {
      var orderWithSignature, newOrder;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (extra === void 0) {
                extra = {};
              }

              _context3.next = 3;
              return prepareLimitOrder(buildLimitOrderParams, extra);

            case 3:
              orderWithSignature = _context3.sent;
              _context3.next = 6;
              return postP2POrder(orderWithSignature, signal);

            case 6:
              newOrder = _context3.sent;
              return _context3.abrupt("return", newOrder);

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function submitP2POrder(_x6, _x7, _x8) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    submitLimitOrder: submitLimitOrder,
    submitP2POrder: submitP2POrder
  };
};
/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */

var constructAllLimitOrdersHandlers = function constructAllLimitOrdersHandlers(options) {
  var limitOrdersGetters = constructGetLimitOrders(options);
  var limitOrdersContractGetter = constructGetLimitOrdersContract(options);
  var limitOrdersSubmit = constructSubmitLimitOrder(options);
  var limitOrdersBuild = constructBuildLimitOrder(options);
  var limitOrdersSign = constructSignLimitOrder(options);
  var limitOrdersPost = constructPostLimitOrder(options);
  var limitOrdersCancel = constructCancelLimitOrder(options);
  var limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);
  var limitOrdersBuildTx = constructBuildLimitOrderTx(options);
  return _extends({}, limitOrdersGetters, limitOrdersContractGetter, limitOrdersSubmit, limitOrdersBuild, limitOrdersSign, limitOrdersPost, limitOrdersCancel, limitOrdersApproveToken, limitOrdersBuildTx);
};

var constructSubmitNFTOrder = function constructSubmitNFTOrder(options) {
  var _constructBuildNFTOrd = constructBuildNFTOrder(options),
      buildNFTOrder = _constructBuildNFTOrd.buildNFTOrder;

  var _constructSignNFTOrde = constructSignNFTOrder(options),
      signNFTOrder = _constructSignNFTOrde.signNFTOrder;

  var _constructPostNFTOrde = constructPostNFTOrder(options),
      postNFTLimitOrder = _constructPostNFTOrde.postNFTLimitOrder,
      postNFTP2POrder = _constructPostNFTOrde.postNFTP2POrder;

  var prepareNFTOrder = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buildNFTOrderParams, extra) {
      var orderData, signature, orderWithSignature;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return buildNFTOrder(buildNFTOrderParams);

            case 2:
              orderData = _context.sent;
              _context.next = 5;
              return signNFTOrder(orderData);

            case 5:
              signature = _context.sent;
              orderWithSignature = _extends({}, orderData.data, extra, {
                signature: signature
              });
              return _context.abrupt("return", orderWithSignature);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function prepareNFTOrder(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var submitNFTOrder = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(buildNFTOrderParams, extra, signal) {
      var orderWithSignature, newOrder;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (extra === void 0) {
                extra = {};
              }

              _context2.next = 3;
              return prepareNFTOrder(buildNFTOrderParams, extra);

            case 3:
              orderWithSignature = _context2.sent;
              _context2.next = 6;
              return postNFTLimitOrder(orderWithSignature, signal);

            case 6:
              newOrder = _context2.sent;
              return _context2.abrupt("return", newOrder);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function submitNFTOrder(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  var submitP2POrder = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buildNFTOrderParams, extra, signal) {
      var orderWithSignature, newOrder;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (extra === void 0) {
                extra = {};
              }

              _context3.next = 3;
              return prepareNFTOrder(buildNFTOrderParams, extra);

            case 3:
              orderWithSignature = _context3.sent;
              _context3.next = 6;
              return postNFTP2POrder(orderWithSignature, signal);

            case 6:
              newOrder = _context3.sent;
              return _context3.abrupt("return", newOrder);

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function submitP2POrder(_x6, _x7, _x8) {
      return _ref3.apply(this, arguments);
    };
  }();

  return {
    submitNFTOrder: submitNFTOrder,
    submitP2POrder: submitP2POrder
  };
};
/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */

var constructAllNFTOrdersHandlers = function constructAllNFTOrdersHandlers(options) {
  var NFTOrdersGetters = constructGetNFTOrders(options);
  var NFTOrdersContractGetter = constructGetNFTOrdersContract(options);
  var NFTOrdersSubmit = constructSubmitNFTOrder(options);
  var NFTOrdersBuild = constructBuildNFTOrder(options);
  var NFTOrdersSign = constructSignNFTOrder(options);
  var NFTOrdersPost = constructPostNFTOrder(options);
  var NFTOrdersCancel = constructCancelNFTOrder(options);
  var NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);
  var NFTOrdersBuildTx = constructBuildNFTOrderTx(options);
  return _extends({}, NFTOrdersGetters, NFTOrdersContractGetter, NFTOrdersSubmit, NFTOrdersBuild, NFTOrdersSign, NFTOrdersPost, NFTOrdersCancel, NFTOrdersApproveToken, NFTOrdersBuildTx);
};

/** @description construct SDK with every method, for swap and limitOrders */

var constructFullSDK = function constructFullSDK(config) {
  // include all available functions
  var swap = constructSwapSDK(config);
  var limitOrders = constructAllLimitOrdersHandlers(config);
  var nftOrders = constructAllNFTOrdersHandlers(config);
  return {
    swap: swap,
    limitOrders: limitOrders,
    nftOrders: nftOrders
  };
};

function constructSimpleSDK(options, providerOptions) {
  var fetcher = 'axios' in options ? constructFetcher$1(options.axios) : constructFetcher(options.fetch);

  if (!providerOptions) {
    var _config = {
      apiURL: options.apiURL,
      chainId: options.chainId,
      fetcher: fetcher
    }; // include all available functions that don't need `contractCaller`

    var _swap = constructPartialSDK(_config, constructGetBalances, constructGetTokens, constructGetSpender, constructBuildTx, constructGetAdapters, constructGetRate);

    var _limitOrders = constructPartialSDK(_config, constructBuildLimitOrder, constructPostLimitOrder, constructGetLimitOrders, constructGetLimitOrdersContract, constructBuildLimitOrderTx);

    var _nftOrders = constructPartialSDK(_config, constructBuildNFTOrder, constructPostNFTOrder, constructGetNFTOrders, constructGetNFTOrdersContract, constructBuildNFTOrderTx);

    return {
      swap: _swap,
      limitOrders: _limitOrders,
      nftOrders: _nftOrders
    };
  }

  var contractCaller = constructSimpleContractCaller(providerOptions);
  var config = {
    apiURL: options.apiURL,
    chainId: options.chainId,
    fetcher: fetcher,
    contractCaller: contractCaller
  };
  var swap = constructSwapSDK(config);
  var limitOrders = constructAllLimitOrdersHandlers(config);
  var nftOrders = constructAllNFTOrdersHandlers(config);
  return {
    swap: swap,
    limitOrders: limitOrders,
    nftOrders: nftOrders
  };
}

function constructSimpleContractCaller(providerOptions) {
  if ('ethersProviderOrSigner' in providerOptions) {
    var _constructEthersContr = constructContractCaller$1(providerOptions, providerOptions.account),
        _staticCall = _constructEthersContr.staticCall,
        _transactCall2 = _constructEthersContr.transactCall,
        _signTypedDataCall = _constructEthersContr.signTypedDataCall;

    var _transactCall3 = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
        var contractTx;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _transactCall2(params);

              case 2:
                contractTx = _context.sent;
                return _context.abrupt("return", contractTx.hash);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function _transactCall3(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    return {
      staticCall: _staticCall,
      transactCall: _transactCall3,
      signTypedDataCall: _signTypedDataCall
    };
  }

  var _constructWeb3Contrac = constructContractCaller(providerOptions.web3, providerOptions.account),
      staticCall = _constructWeb3Contrac.staticCall,
      _transactCall = _constructWeb3Contrac.transactCall,
      signTypedDataCall = _constructWeb3Contrac.signTypedDataCall;

  var transactCall = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var unpromiEvent;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _transactCall(params);

            case 2:
              unpromiEvent = _context2.sent;
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                unpromiEvent.once('transactionHash', resolve);
                unpromiEvent.once('error', reject);
              }));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function transactCall(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    staticCall: staticCall,
    transactCall: transactCall,
    signTypedDataCall: signTypedDataCall
  };
}

/** @deprecated */

var ParaSwap = /*#__PURE__*/function () {
  // need to be a provider with signer for approve requests
  function ParaSwap(_ref) {
    var _ref$chainId = _ref.chainId,
        chainId = _ref$chainId === void 0 ? 1 : _ref$chainId,
        _ref$apiURL = _ref.apiURL,
        apiURL = _ref$apiURL === void 0 ? API_URL : _ref$apiURL,
        web3Provider = _ref.web3Provider,
        ethersDeps = _ref.ethersDeps,
        account = _ref.account,
        axios = _ref.axios,
        fetch = _ref.fetch;
    this.sdk = {};
    this.fetcher = void 0;
    this.chainId = void 0;
    this.apiURL = void 0;
    this.web3Provider = void 0;
    this.ethersDeps = void 0;
    this.account = void 0;
    this.chainId = chainId;
    this.apiURL = apiURL;
    this.web3Provider = web3Provider;
    this.ethersDeps = ethersDeps;
    this.account = account;
    var fetcher = axios ? constructFetcher$1(axios) : fetch ? constructFetcher(fetch) : null;
    assert(fetcher, 'at least one fetcher is needed');
    this.fetcher = fetcher;

    if (!web3Provider && !ethersDeps) {
      this.sdk = constructPartialSDK({
        fetcher: fetcher,
        apiURL: apiURL,
        chainId: chainId
      }, constructGetBalances, constructGetTokens, constructGetSpender, constructBuildTx, constructGetAdapters, constructGetRate);
      return;
    }

    var contractCaller = ethersDeps ? constructContractCaller$1(ethersDeps, account) : web3Provider ? constructContractCaller(web3Provider, account) : null;

    if (contractCaller) {
      this.sdk = constructSwapSDK({
        fetcher: fetcher,
        contractCaller: contractCaller,
        apiURL: apiURL,
        chainId: chainId
      });
    }
  }

  ParaSwap.handleAPIError = function handleAPIError(e) {
    // @CONSIDER if some errors should not be replaced
    if (!isFetcherError(e)) {
      return {
        message: "Unknown error: " + e
      };
    }

    if (!e.response) {
      return {
        message: e.message
      };
    }

    var _e$response = e.response,
        status = _e$response.status,
        data = _e$response.data;
    return {
      status: status,
      message: isDataWithError(data) ? data.error : e.message,
      data: data
    };
  };

  ParaSwap.extractHashFromTxResponse = /*#__PURE__*/function () {
    var _extractHashFromTxResponse = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(txResponse) {
      var _yield$txResponse, hash;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!('once' in txResponse)) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", new Promise(function (resolve, reject) {
                txResponse.once('transactionHash', resolve);
                txResponse.once('error', reject);
              }));

            case 2:
              _context.next = 4;
              return txResponse;

            case 4:
              _yield$txResponse = _context.sent;
              hash = _yield$txResponse.hash;
              return _context.abrupt("return", hash);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function extractHashFromTxResponse(_x) {
      return _extractHashFromTxResponse.apply(this, arguments);
    }

    return extractHashFromTxResponse;
  }();

  var _proto = ParaSwap.prototype;

  _proto.setWeb3Provider = function setWeb3Provider(web3Provider, account) {
    var contractCaller = constructContractCaller(web3Provider, account);
    var apiURL = this.apiURL,
        chainId = this.chainId,
        fetcher = this.fetcher;
    this.sdk = constructSwapSDK({
      fetcher: fetcher,
      contractCaller: contractCaller,
      apiURL: apiURL,
      chainId: chainId
    });
    this.web3Provider = web3Provider;
    this.ethersDeps = undefined;
    this.account = account;
    return this;
  };

  _proto.setEthersProvider = function setEthersProvider(ethersDeps, account) {
    var contractCaller = constructContractCaller$1(ethersDeps, account);
    var apiURL = this.apiURL,
        chainId = this.chainId,
        fetcher = this.fetcher;
    this.sdk = constructSwapSDK({
      fetcher: fetcher,
      contractCaller: contractCaller,
      apiURL: apiURL,
      chainId: chainId
    });
    this.web3Provider = undefined;
    this.ethersDeps = ethersDeps;
    this.account = account;
    return this;
  } // @CONSIDER I still think there's no need for a class Token
  ;

  _proto.getTokens =
  /*#__PURE__*/
  function () {
    var _getTokens = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              assert(this.sdk.getTokens, 'sdk must be initialized with a fetcher');
              _context2.prev = 1;
              _context2.next = 4;
              return this.sdk.getTokens();

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](1);
              return _context2.abrupt("return", ParaSwap.handleAPIError(_context2.t0));

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[1, 7]]);
    }));

    function getTokens() {
      return _getTokens.apply(this, arguments);
    }

    return getTokens;
  }();

  _proto.getAdapters = /*#__PURE__*/function () {
    var _getAdapters = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');
              _context3.prev = 1;
              _context3.next = 4;
              return this.sdk.getAdapters({
                type: 'object'
              });

            case 4:
              return _context3.abrupt("return", _context3.sent);

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](1);
              return _context3.abrupt("return", ParaSwap.handleAPIError(_context3.t0));

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[1, 7]]);
    }));

    function getAdapters() {
      return _getAdapters.apply(this, arguments);
    }

    return getAdapters;
  }();

  _proto.getRateByRoute = /*#__PURE__*/function () {
    var _getRateByRoute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(route, amount, userAddress, side, options, srcDecimals, destDecimals) {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (side === void 0) {
                side = SwapSide.SELL;
              }

              assert(this.sdk.getRateByRoute, 'sdk must be initialized with a fetcher');

              if (!(route.length < 2)) {
                _context4.next = 4;
                break;
              }

              return _context4.abrupt("return", {
                message: 'Invalid Route'
              });

            case 4:
              _context4.prev = 4;
              _context4.next = 7;
              return this.sdk.getRateByRoute({
                route: route,
                amount: amount,
                userAddress: userAddress,
                side: side,
                options: options,
                srcDecimals: srcDecimals,
                destDecimals: destDecimals
              });

            case 7:
              return _context4.abrupt("return", _context4.sent);

            case 10:
              _context4.prev = 10;
              _context4.t0 = _context4["catch"](4);
              return _context4.abrupt("return", ParaSwap.handleAPIError(_context4.t0));

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[4, 10]]);
    }));

    function getRateByRoute(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {
      return _getRateByRoute.apply(this, arguments);
    }

    return getRateByRoute;
  }();

  _proto.getRate = /*#__PURE__*/function () {
    var _getRate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(srcToken, destToken, amount, userAddress, side, options, srcDecimals, destDecimals) {
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (side === void 0) {
                side = SwapSide.SELL;
              }

              if (options === void 0) {
                options = {};
              }

              assert(this.sdk.getRate, 'sdk must be initialized with a fetcher');
              _context5.prev = 3;
              _context5.next = 6;
              return this.sdk.getRate({
                srcToken: srcToken,
                destToken: destToken,
                amount: amount,
                userAddress: userAddress,
                side: side,
                options: options,
                srcDecimals: srcDecimals,
                destDecimals: destDecimals
              });

            case 6:
              return _context5.abrupt("return", _context5.sent);

            case 9:
              _context5.prev = 9;
              _context5.t0 = _context5["catch"](3);
              return _context5.abrupt("return", ParaSwap.handleAPIError(_context5.t0));

            case 12:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[3, 9]]);
    }));

    function getRate(_x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16) {
      return _getRate.apply(this, arguments);
    }

    return getRate;
  }();

  _proto.buildTx = /*#__PURE__*/function () {
    var _buildTx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(srcToken, destToken, srcAmount, destAmount, priceRoute, userAddress, partner, partnerAddress, partnerFeeBps, receiver, options, srcDecimals, destDecimals, permit, deadline) {
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }

              assert(this.sdk.buildTx, 'sdk must be initialized with a fetcher');
              _context6.prev = 2;
              _context6.next = 5;
              return this.sdk.buildTx({
                srcToken: srcToken,
                destToken: destToken,
                srcAmount: srcAmount,
                destAmount: destAmount,
                priceRoute: priceRoute,
                userAddress: userAddress,
                partner: partner,
                partnerAddress: partnerAddress,
                partnerFeeBps: partnerFeeBps,
                receiver: receiver,
                srcDecimals: srcDecimals,
                destDecimals: destDecimals,
                permit: permit,
                deadline: deadline
              }, options);

            case 5:
              return _context6.abrupt("return", _context6.sent);

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](2);
              return _context6.abrupt("return", ParaSwap.handleAPIError(_context6.t0));

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[2, 8]]);
    }));

    function buildTx(_x17, _x18, _x19, _x20, _x21, _x22, _x23, _x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31) {
      return _buildTx.apply(this, arguments);
    }

    return buildTx;
  }();

  _proto.getTokenTransferProxy = /*#__PURE__*/function () {
    var _getTokenTransferProxy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_provider) {
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              assert(this.sdk.getSpender, 'sdk must be initialized with a fetcher');
              _context7.prev = 1;
              _context7.next = 4;
              return this.sdk.getSpender();

            case 4:
              return _context7.abrupt("return", _context7.sent);

            case 7:
              _context7.prev = 7;
              _context7.t0 = _context7["catch"](1);
              return _context7.abrupt("return", ParaSwap.handleAPIError(_context7.t0));

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[1, 7]]);
    }));

    function getTokenTransferProxy(_x32) {
      return _getTokenTransferProxy.apply(this, arguments);
    }

    return getTokenTransferProxy;
  }();

  _proto.getAllowances = /*#__PURE__*/function () {
    var _getAllowances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(userAddress, tokenAddresses) {
      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              assert(this.sdk.getAllowances, 'sdk must be initialized with a fetcher');
              _context8.prev = 1;
              _context8.next = 4;
              return this.sdk.getAllowances(userAddress, tokenAddresses);

            case 4:
              return _context8.abrupt("return", _context8.sent);

            case 7:
              _context8.prev = 7;
              _context8.t0 = _context8["catch"](1);
              return _context8.abrupt("return", ParaSwap.handleAPIError(_context8.t0));

            case 10:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[1, 7]]);
    }));

    function getAllowances(_x33, _x34) {
      return _getAllowances.apply(this, arguments);
    }

    return getAllowances;
  }();

  _proto.getAllowance = /*#__PURE__*/function () {
    var _getAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(userAddress, tokenAddress) {
      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              assert(this.sdk.getAllowance, 'sdk must be initialized with a fetcher');
              _context9.prev = 1;
              _context9.next = 4;
              return this.sdk.getAllowance(userAddress, tokenAddress);

            case 4:
              return _context9.abrupt("return", _context9.sent);

            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](1);
              return _context9.abrupt("return", ParaSwap.handleAPIError(_context9.t0));

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[1, 7]]);
    }));

    function getAllowance(_x35, _x36) {
      return _getAllowance.apply(this, arguments);
    }

    return getAllowance;
  }();

  _proto.approveTokenBulk = /*#__PURE__*/function () {
    var _approveTokenBulk = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(amount, userAddress, tokenAddresses,
    /** @deprecated */
    _provider // not used, can't detect if Ethers or Web3 provider without importing them
    ) {
      var txResponses;
      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              // @TODO expand sendOptions
              assert(this.sdk.approveTokenBulk, 'sdk must be initialized with a provider');
              _context10.prev = 1;
              _context10.next = 4;
              return this.sdk.approveTokenBulk(amount, tokenAddresses);

            case 4:
              txResponses = _context10.sent;
              _context10.next = 7;
              return Promise.all(txResponses.map(ParaSwap.extractHashFromTxResponse));

            case 7:
              return _context10.abrupt("return", _context10.sent);

            case 10:
              _context10.prev = 10;
              _context10.t0 = _context10["catch"](1);
              return _context10.abrupt("return", ParaSwap.handleAPIError(_context10.t0));

            case 13:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[1, 10]]);
    }));

    function approveTokenBulk(_x37, _x38, _x39, _x40) {
      return _approveTokenBulk.apply(this, arguments);
    }

    return approveTokenBulk;
  }();

  _proto.approveToken = /*#__PURE__*/function () {
    var _approveToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(amount, userAddress, tokenAddress,
    /** @deprecated */
    _provider, // not used, can't detect if Ethers or Web3 provider without importing them
    sendOptions) {
      var txResponse;
      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              // @TODO expand sendOptions
              assert(this.sdk.approveToken, 'sdk must be initialized with a provider');
              _context11.prev = 1;
              _context11.next = 4;
              return this.sdk.approveToken(amount, tokenAddress);

            case 4:
              txResponse = _context11.sent;
              _context11.next = 7;
              return ParaSwap.extractHashFromTxResponse(txResponse);

            case 7:
              return _context11.abrupt("return", _context11.sent);

            case 10:
              _context11.prev = 10;
              _context11.t0 = _context11["catch"](1);
              return _context11.abrupt("return", ParaSwap.handleAPIError(_context11.t0));

            case 13:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this, [[1, 10]]);
    }));

    function approveToken(_x41, _x42, _x43, _x44, _x45) {
      return _approveToken.apply(this, arguments);
    }

    return approveToken;
  }();

  _proto.getMarketNames = /*#__PURE__*/function () {
    var _getMarketNames = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
      return _regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');
              _context12.prev = 1;
              _context12.next = 4;
              return this.sdk.getAdapters({
                type: 'list',
                namesOnly: true
              });

            case 4:
              return _context12.abrupt("return", _context12.sent);

            case 7:
              _context12.prev = 7;
              _context12.t0 = _context12["catch"](1);
              return _context12.abrupt("return", ParaSwap.handleAPIError(_context12.t0));

            case 10:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[1, 7]]);
    }));

    function getMarketNames() {
      return _getMarketNames.apply(this, arguments);
    }

    return getMarketNames;
  }();

  _proto.getBalance = /*#__PURE__*/function () {
    var _getBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(userAddress, token) {
      return _regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              assert(this.sdk.getBalance, 'sdk must be initialized with a fetcher');
              _context13.prev = 1;
              _context13.next = 4;
              return this.sdk.getBalance(userAddress, token);

            case 4:
              return _context13.abrupt("return", _context13.sent);

            case 7:
              _context13.prev = 7;
              _context13.t0 = _context13["catch"](1);
              return _context13.abrupt("return", ParaSwap.handleAPIError(_context13.t0));

            case 10:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this, [[1, 7]]);
    }));

    function getBalance(_x46, _x47) {
      return _getBalance.apply(this, arguments);
    }

    return getBalance;
  }();

  _proto.getBalances = /*#__PURE__*/function () {
    var _getBalances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(userAddress) {
      return _regeneratorRuntime.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              assert(this.sdk.getBalances, 'sdk must be initialized with a fetcher');
              _context14.prev = 1;
              _context14.next = 4;
              return this.sdk.getBalances(userAddress);

            case 4:
              return _context14.abrupt("return", _context14.sent);

            case 7:
              _context14.prev = 7;
              _context14.t0 = _context14["catch"](1);
              return _context14.abrupt("return", ParaSwap.handleAPIError(_context14.t0));

            case 10:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this, [[1, 7]]);
    }));

    function getBalances(_x48) {
      return _getBalances.apply(this, arguments);
    }

    return getBalances;
  }();

  return ParaSwap;
}();

export { API_URL, AssetType, ParaSwap, constructAllLimitOrdersHandlers, constructAllNFTOrdersHandlers, constructApproveToken, constructApproveTokenForLimitOrder, constructApproveTokenForNFTOrder, constructFetcher$1 as constructAxiosFetcher, constructBuildLimitOrder, constructBuildLimitOrderTx, constructBuildNFTOrder, constructBuildNFTOrderTx, constructBuildTx, constructCancelLimitOrder, constructCancelNFTOrder, constructContractCaller$1 as constructEthersContractCaller, constructFetcher as constructFetchFetcher, constructFullSDK, constructGetAdapters, constructGetBalances, constructGetLimitOrders, constructGetLimitOrdersContract, constructGetNFTOrders, constructGetNFTOrdersContract, constructGetRate, constructGetSpender, constructGetTokens, constructPartialSDK, constructPostLimitOrder, constructPostNFTOrder, constructSignLimitOrder, constructSignNFTOrder, constructSimpleSDK, constructSubmitLimitOrder, constructSubmitNFTOrder, constructSwapSDK, constructToken, constructContractCaller as constructWeb3ContractCaller, isAllowance, isFetcherError };
//# sourceMappingURL=sdk.esm.js.map
