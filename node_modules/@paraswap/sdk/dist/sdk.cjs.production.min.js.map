{"version":3,"file":"sdk.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/helpers/misc.ts","../src/methods/swap/spender.ts","../src/helpers/approve.ts","../src/methods/swap/rates.ts","../src/methods/swap/approve.ts","../src/helpers/token.ts","../src/methods/swap/balance.ts","../src/methods/swap/adapters.ts","../src/methods/swap/token.ts","../src/methods/common/orders/misc.ts","../src/methods/limitOrders/helpers/misc.ts","../src/methods/common/orders/buildOrderData.ts","../src/methods/nftOrders/helpers/buildOrderData.ts","../src/methods/nftOrders/helpers/misc.ts","../src/methods/swap/transaction.ts","../src/methods/limitOrders/helpers/buildOrderData.ts","../src/methods/limitOrders/buildOrder.ts","../src/methods/limitOrders/signOrder.ts","../src/methods/limitOrders/cancelOrder.ts","../src/methods/limitOrders/getOrders.ts","../src/methods/limitOrders/postOrder.ts","../src/methods/limitOrders/approveForOrder.ts","../src/methods/limitOrders/getOrdersContract.ts","../src/methods/limitOrders/transaction.ts","../src/methods/nftOrders/buildOrder.ts","../src/methods/nftOrders/signOrder.ts","../src/methods/nftOrders/cancelOrder.ts","../src/methods/nftOrders/getOrders.ts","../src/methods/nftOrders/postOrder.ts","../src/methods/nftOrders/getOrdersContract.ts","../src/methods/nftOrders/approveForOrder.ts","../src/methods/nftOrders/transaction.ts","../src/helpers/fetchers/axios.ts","../src/helpers/fetchers/fetch.ts","../src/helpers/providers/ethers.ts","../src/helpers/providers/web3.ts","../src/sdk/partial.ts","../src/methods/swap/index.ts","../src/methods/limitOrders/index.ts","../src/methods/nftOrders/index.ts","../src/legacy/index.ts","../src/sdk/full.ts","../src/sdk/simple.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export { SwapSide, ContractMethod } from 'paraswap-core';\n\nexport const API_URL = 'https://api.paraswap.io';\n","import type {\n  Contract as EthersContract,\n  ContractFunction as EthersContractFunction,\n  PopulatedTransaction as EthersPopulatedTransaction,\n  BigNumber as EthersBigNumber,\n} from 'ethers';\nimport type {\n  ContractSendMethod as Web3ContractSendMethod,\n  Contract as Web3Contract,\n} from 'web3-eth-contract';\nimport { assert, Primitive } from 'ts-essentials';\n\nimport type { AxiosError } from 'axios';\n\nexport type EthersContractWithMethod<T extends string> = EthersContract & {\n  readonly [method in T]: EthersContractFunction;\n} & {\n  readonly functions: { [method in T]: EthersContractFunction };\n\n  readonly callStatic: { [method in T]: EthersContractFunction };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunction<EthersBigNumber>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunction<EthersPopulatedTransaction>;\n  };\n};\n\nexport function ethersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): contract is EthersContractWithMethod<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nexport function assertEthersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethod<T> {\n  assert(\n    ethersContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport type Web3ContractWithMethod<T extends string> = Web3Contract & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nexport function web3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nexport function assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n//                                                            not arrays or mappings\nexport const constructSearchString = <U extends Record<string, Primitive>>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype FetcherErrorConstructorInput = Pick<\n  AxiosError,\n  'code' | 'request' | 'response' | 'isAxiosError' | 'message'\n>;\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n","import { API_URL } from '../../constants';\nimport { runOnceAndCache } from '../../helpers/misc';\nimport type { ConstructFetchInput, Address } from '../../types';\n\nexport type GetSpender = (signal?: AbortSignal) => Promise<Address>;\ntype GetContracts = (signal?: AbortSignal) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\ninterface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const fetchURL = `${apiURL}/adapters/contracts?network=${chainId}`;\n\n  const _getContracts: GetContracts = async (signal) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (signal) => {\n    const { TokenTransferProxy } = await getContracts(signal);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (signal) => {\n    const { AugustusSwapper } = await getContracts(signal);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (signal) => {\n    const { AugustusRFQ } = await getContracts(signal);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  signal?: AbortSignal\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, signal) => {\n    const spender = await getSpender(signal);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n","import { SwapSide, ContractMethod, API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n} from '../../types';\n\n// TODO: This is legacy and can be removed\nexport enum PricingMethod {\n  megapath = 'megapath',\n  multipath = 'multipath',\n  simplepath = 'simplepath',\n}\n\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludePricingMethods?: PricingMethod[];\n  excludeContractMethods?: ContractMethod[];\n  includeContractMethods?: ContractMethod[];\n  adapterVersion?: string;\n  partner?: string;\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: SwapSide;\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\n\nconst DEFAULT_PARTNER = 'paraswap.io';\n\nconst INVALID_ROUTE = 'Invalid Route';\n\ntype SearchStringParams = CommonGetRateResult & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n  network: number;\n};\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices`;\n\n  const getRate: GetRate = async ({ srcToken, destToken, ...rest }, signal) => {\n    const parsedOptions = commonGetRateOptionsGetter(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>({\n      srcToken,\n      destToken,\n      network: chainId,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}`;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async ({ route, ...rest }, signal) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = commonGetRateOptionsGetter(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString({\n      route: _route,\n      network: chainId,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}`;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n\ntype CommonGetRateResult = {\n  amount: string;\n  side?: SwapSide;\n  excludeDEXS?: string;\n  includeDEXS?: string;\n  excludePools?: string;\n  version?: string;\n  excludePricingMethods?: string;\n  excludeContractMethods?: string;\n  includeContractMethods?: string;\n  srcDecimals?: number;\n  destDecimals?: number;\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  userAddress?: string;\n  partner: string;\n  otherExchangePrices?: boolean;\n};\nfunction commonGetRateOptionsGetter({\n  options = {},\n  ...restInput\n}: CommonGetRateInput): CommonGetRateResult {\n  const {\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    adapterVersion,\n    partner = DEFAULT_PARTNER,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludePricingMethods,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  return {\n    version: adapterVersion,\n    excludePricingMethods: _excludePricingMethods,\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n    ...restInput,\n    ...restOptions,\n  };\n}\n","import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    signal\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, signal)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n","import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = string;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n","import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  signal?: AbortSignal\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  signal?: AbortSignal\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  signal?: AbortSignal\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  signal?: AbortSignal\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}`;\n\n  const getBalances: GetBalances = async (userAddress, signal) => {\n    const fetchURL = `${tokensUrl}/${userAddress}`;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    signal\n  ) => {\n    const fetchURL = `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}`;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    signal\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, signal);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    signal\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      signal\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL } from '../../constants';\n\ntype Adapter = {\n  adapter: string;\n  index: number;\n};\n\ntype AdaptersAsObject = Record<string, Adapter[]>;\ntype AdaptersAsList = { name: string; adapters: Adapter[] }[];\ntype AdaptersAsStrings = string[];\n\ntype OptionsObject = { type: 'object' };\ntype OptionsList = { type: 'list'; namesOnly?: false };\ntype OptionsListNamesOnly = { type: 'list'; namesOnly: true };\n\nexport type AllAdaptersOptions =\n  | OptionsObject\n  | OptionsList\n  | OptionsListNamesOnly;\n\ninterface GetAdaptersFunc {\n  (options: OptionsObject, signal?: AbortSignal): Promise<AdaptersAsObject>;\n  (options: OptionsList, signal?: AbortSignal): Promise<AdaptersAsList>;\n  (\n    options: OptionsListNamesOnly,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsStrings>;\n  (options: AllAdaptersOptions, signal?: AbortSignal): Promise<\n    AdaptersAsObject | AdaptersAsList | AdaptersAsStrings\n  >;\n}\n\nexport type GetAdaptersFunctions = {\n  getAdapters: GetAdaptersFunc;\n};\n\ntype SearchStringParams = {\n  network: number;\n  namesOnly?: boolean;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  async function getAdapters(\n    options: OptionsObject,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject>;\n  async function getAdapters(\n    options: OptionsList,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsList>;\n  async function getAdapters(\n    options: OptionsListNamesOnly,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsStrings>;\n  async function getAdapters(\n    options: AllAdaptersOptions,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject | AdaptersAsList | AdaptersAsStrings>;\n  async function getAdapters(\n    options: AllAdaptersOptions,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject | AdaptersAsList | AdaptersAsStrings> {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      namesOnly:\n        !!options && 'namesOnly' in options ? options.namesOnly : undefined,\n    });\n\n    const fetchURL = `${apiURL}/adapters${\n      options?.type === 'list' ? '/list' : ''\n    }${query}`;\n\n    const data = await fetcher<\n      AdaptersAsObject | AdaptersAsList | AdaptersAsStrings\n    >({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  }\n\n  return { getAdapters };\n};\n","import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (signal?: AbortSignal) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}`;\n\n  const getTokens: GetTokens = async (signal) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n","import type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type?: OrderType): BaseFetchUrl<Kind> | MinFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType\n    ): BaseFetchUrl<Kind> | MinFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n","import type {\n  TypedDataDomain as EthersTypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\n\nexport const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = Omit<EthersTypedDataDomain, 'chainId'> & {\n  chainId: number;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n","import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n","import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gasPrice: string;\n  gas?: string;\n  chainId: number;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  ignoreChecks?: boolean;\n  ignoreGasEstimate?: boolean;\n  onlyParams?: boolean;\n  simple?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}`;\n\n  const buildTx: BuildTx = async (params, options = {}, signal) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMistmatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMistmatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}`;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order || 'takerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      signal,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n","import { getRandomInt } from '../../../helpers/misc';\nimport type { Address } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n  // otherwise p2p order -> fill through Augustus only\n  const taker = takerInNonce === ZERO_ADDRESS ? ZERO_ADDRESS : AugustusAddress;\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    signal\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole ERC20_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n","// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ninterface PaginationParams {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n}\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<LimitOrdersApiResponse>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances } = userParams;\n    const search = constructSearchString({ offset, limit, hideSmallBalances });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    signal\n  ) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  // network, @TODO would it make more sense to post by network?\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    signal?: AbortSignal\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n","import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide, ContractMethod } from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (params, options, signal) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (buildNFTOrderParams, signal) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructCancelLimitOrder } from '../limitOrders/cancelOrder';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (orderHash, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    signal?: AbortSignal\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n","import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTorNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n  const AugustusRFQ = getNFTOrdersContract();\n\n  const approveNFTorNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {}\n  ) => {\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTorNFTOrder };\n};\n","import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide, ContractMethod } from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (params, options, signal) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n","import type { FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement): FetcherFunction =>\n  async (params) => {\n    try {\n      const { data } = await axios.request(params);\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n","import type { FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, signal } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      const headers =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      const response = await fetch(url, { method, body, signal, headers });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n","import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersContract,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\nimport { assertEthersContractHasMethods } from '../misc';\nimport { assert } from 'ts-essentials';\n\nexport interface EthersProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency even when using legacy ParaSwap class\n}\n\nexport const constructContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type Web3 from 'web3';\nimport type { AbiItem } from 'web3-utils';\nimport type {\n  ContractSendMethod,\n  SendOptions,\n  CallOptions,\n  Contract,\n} from 'web3-eth-contract';\nimport type { PromiEvent, provider, AbstractProvider } from 'web3-core';\nimport type { JsonRpcResponse } from 'web3-core-helpers';\nimport { assert } from 'ts-essentials';\nimport { assertWeb3ContractHasMethods } from '../misc';\nimport type { TypedDataField } from '@ethersproject/abstract-signer';\n\nexport type Web3UnpromiEvent = Pick<PromiEvent<Contract>, 'on' | 'once'>;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas,\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas,\n    };\n\n    const preparedCall = contract.methods[contractMethod](\n      ...args\n    ) as ContractSendMethod;\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const provider = web3.currentProvider;\n    assert(\n      isProviderWithSendMethod(provider),\n      'web3.currentProvider needs to be capable of sending arbitrary rpc calls'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    const response = await new Promise<JsonRpcResponse>((resolve, reject) => {\n      provider.send(\n        {\n          jsonrpc: '2.0',\n          // method: 'eth_signTypedData_v4',\n          method: 'eth_signTypedData',\n          params: [account, _typedData],\n        },\n        (error, result) => {\n          if (error) return reject(error);\n          if (!result) {\n            throw new Error('No result in response to eth_signTypedData');\n          }\n          resolve(result);\n        }\n      );\n    });\n\n    return response.result;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isProviderWithSendMethod<T extends provider>(\n  provider: T\n): provider is T & Required<Pick<AbstractProvider, 'send'>> {\n  return !!provider && typeof provider === 'object' && 'send' in provider;\n}\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nfunction findPrimaryType(types: Record<string, TypedDataField[]>): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n","import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [head: infer Head, ...tail: infer Tail]\n  ? Tail extends Record<string, any>[]\n    ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n    : MergeExtendableOnce<Accum, Head>\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  return sdkFuncs as PartialSDKResult<Config, Funcs>;\n};\n","import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { ConstructProviderFetchInput } from '../../types';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> =>\n  // include all available Swap methods\n  constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveToken as (\n      options: ConstructProviderFetchInput<TxResponse, 'transactCall'>\n    ) => ApproveTokenFunctions<TxResponse>, // @TODO try Instantiation Expression when TS 4.7 `as constructApproveToken<TxResponse>`\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate\n  );\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport { Address } from 'paraswap-core';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersBuildTx,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n","import type Web3 from 'web3';\nimport type { SendOptions } from 'web3-eth-contract';\nimport type { ContractTransaction } from '@ethersproject/contracts';\n\nimport { API_URL, SwapSide } from '../constants';\nimport {\n  SwapSDKMethods,\n  constructBuildTx,\n  constructGetAdapters,\n  constructGetBalances,\n  constructGetSpender,\n  constructGetTokens,\n  constructPartialSDK,\n  constructGetRate,\n  constructSwapSDK,\n  PriceString,\n  Address,\n  OptimalRate,\n} from '..';\nimport { assert } from 'ts-essentials';\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n  isFetcherError,\n  Web3UnpromiEvent,\n  EthersProviderDeps,\n} from '../helpers';\n\nimport type { RateOptions } from '../methods/swap/rates';\nimport type {\n  BuildOptions,\n  TransactionParams,\n} from '../methods/swap/transaction';\nimport type { AddressOrSymbol, Token, FetcherFunction } from '../types';\nimport type { Allowance } from '../methods/swap/balance';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { isDataWithError } from '../helpers/misc';\n\nexport type APIError = {\n  message: string;\n  status?: number;\n  data?: any;\n};\ntype Fetch = typeof fetch;\n\ntype TxResponse = Web3UnpromiEvent | ContractTransaction;\n\ntype LegacyOptions = {\n  chainId?: number;\n  apiURL?: string;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n  axios?: AxiosRequirement;\n  fetch?: Fetch;\n};\n\n/** @deprecated */\nexport class ParaSwap {\n  sdk: Partial<SwapSDKMethods<TxResponse>> = {};\n  fetcher: FetcherFunction;\n\n  chainId: number;\n  apiURL: string;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n\n  constructor({\n    chainId = 1,\n    apiURL = API_URL,\n    web3Provider,\n    ethersDeps,\n    account,\n    axios,\n    fetch,\n  }: LegacyOptions) {\n    this.chainId = chainId;\n    this.apiURL = apiURL;\n    this.web3Provider = web3Provider;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    const fetcher = axios\n      ? constructAxiosFetcher(axios)\n      : fetch\n      ? constructFetchFetcher(fetch)\n      : null;\n\n    assert(fetcher, 'at least one fetcher is needed');\n    this.fetcher = fetcher;\n\n    if (!web3Provider && !ethersDeps) {\n      this.sdk = constructPartialSDK(\n        { fetcher, apiURL, chainId },\n        constructGetBalances,\n        constructGetTokens,\n        constructGetSpender,\n        constructBuildTx,\n        constructGetAdapters,\n        constructGetRate\n      );\n\n      return;\n    }\n\n    const contractCaller = ethersDeps\n      ? constructEthersContractCaller(ethersDeps, account)\n      : web3Provider\n      ? constructWeb3ContractCaller(web3Provider, account)\n      : null;\n\n    if (contractCaller) {\n      this.sdk = constructSwapSDK<TxResponse>({\n        fetcher,\n        contractCaller,\n        apiURL,\n        chainId,\n      });\n    }\n  }\n\n  private static handleAPIError(e: unknown): APIError {\n    // @CONSIDER if some errors should not be replaced\n    if (!isFetcherError(e)) {\n      return { message: `Unknown error: ${e}` };\n    }\n\n    if (!e.response) {\n      return { message: e.message };\n    }\n\n    const { status, data } = e.response;\n\n    return {\n      status,\n      message: isDataWithError(data) ? data.error : e.message,\n      data,\n    };\n  }\n\n  private static async extractHashFromTxResponse(\n    txResponse: TxResponse\n  ): Promise<string> {\n    if ('once' in txResponse) {\n      return new Promise<string>((resolve, reject) => {\n        txResponse.once('transactionHash', resolve);\n        txResponse.once('error', reject);\n      });\n    }\n\n    const { hash } = await txResponse;\n    return hash;\n  }\n\n  setWeb3Provider(web3Provider: Web3, account?: string): this {\n    const contractCaller = constructWeb3ContractCaller(web3Provider, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      chainId,\n    });\n\n    this.web3Provider = web3Provider;\n    this.ethersDeps = undefined;\n    this.account = account;\n\n    return this;\n  }\n\n  setEthersProvider(ethersDeps: EthersProviderDeps, account?: string): this {\n    const contractCaller = constructEthersContractCaller(ethersDeps, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      chainId,\n    });\n\n    this.web3Provider = undefined;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    return this;\n  }\n\n  // @CONSIDER I still think there's no need for a class Token\n  async getTokens(): Promise<Token[] | APIError> {\n    assert(this.sdk.getTokens, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getTokens();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAdapters() {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters({ type: 'object' });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRateByRoute(\n    route: AddressOrSymbol[],\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options?: RateOptions,\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRateByRoute, 'sdk must be initialized with a fetcher');\n    if (route.length < 2) {\n      return { message: 'Invalid Route' };\n    }\n\n    try {\n      return await this.sdk.getRateByRoute({\n        route,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      // @TODO this overrides any non FetchError,\n      // including Error('Invalid DEX list')\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRate(\n    srcToken: AddressOrSymbol,\n    destToken: AddressOrSymbol,\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options: RateOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRate, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getRate({\n        srcToken,\n        destToken,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async buildTx(\n    srcToken: Address,\n    destToken: Address,\n    srcAmount: PriceString,\n    destAmount: PriceString,\n    priceRoute: OptimalRate,\n    userAddress: Address,\n    partner?: string,\n    partnerAddress?: string,\n    partnerFeeBps?: number,\n    receiver?: Address,\n    options: BuildOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number,\n    permit?: string,\n    deadline?: string\n  ): Promise<TransactionParams | APIError> {\n    assert(this.sdk.buildTx, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.buildTx(\n        {\n          srcToken,\n          destToken,\n          srcAmount,\n          destAmount,\n          priceRoute,\n          userAddress,\n          partner,\n          partnerAddress,\n          partnerFeeBps,\n          receiver,\n          srcDecimals,\n          destDecimals,\n          permit,\n          deadline,\n        },\n        options\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getTokenTransferProxy(_provider?: any): Promise<Address | APIError> {\n    assert(this.sdk.getSpender, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getSpender();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowances(\n    userAddress: Address,\n    tokenAddresses: Address[]\n  ): Promise<Allowance[] | APIError> {\n    assert(this.sdk.getAllowances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowances(userAddress, tokenAddresses);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowance(\n    userAddress: Address,\n    tokenAddress: Address\n  ): Promise<Allowance | APIError> {\n    assert(this.sdk.getAllowance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowance(userAddress, tokenAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveTokenBulk(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddresses: Address[],\n    /** @deprecated */\n    _provider?: any // not used, can't detect if Ethers or Web3 provider without importing them\n  ): Promise<string[] | APIError> {\n    // @TODO expand sendOptions\n    assert(\n      this.sdk.approveTokenBulk,\n      'sdk must be initialized with a provider'\n    );\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponses = await this.sdk.approveTokenBulk(\n        amount,\n        tokenAddresses\n      );\n\n      return await Promise.all(\n        txResponses.map(ParaSwap.extractHashFromTxResponse)\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveToken(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddress: Address,\n    /** @deprecated */\n    _provider?: any, // not used, can't detect if Ethers or Web3 provider without importing them\n    sendOptions?: Omit<SendOptions, 'from'>\n  ): Promise<string | APIError> {\n    // @TODO expand sendOptions\n    assert(this.sdk.approveToken, 'sdk must be initialized with a provider');\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponse = await this.sdk.approveToken(amount, tokenAddress);\n\n      return await ParaSwap.extractHashFromTxResponse(txResponse);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getMarketNames(): Promise<string[] | APIError> {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters({ type: 'list', namesOnly: true });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalance(\n    userAddress: Address,\n    token: AddressOrSymbol\n  ): Promise<Token | APIError> {\n    assert(this.sdk.getBalance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalance(userAddress, token);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalances(userAddress: Address): Promise<Token[] | APIError> {\n    assert(this.sdk.getBalances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalances(userAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n}\n","import type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { GetBalancesFunctions } from '../methods/swap/balance';\nimport type { GetSpenderFunctions } from '../methods/swap/spender';\nimport type { GetAdaptersFunctions } from '../methods/swap/adapters';\nimport type { GetRateFunctions } from '../methods/swap/rates';\nimport type { GetTokensFunctions } from '../methods/swap/token';\nimport type { BuildTxFunctions } from '../methods/swap/transaction';\nimport type { SDKConfig } from './partial';\nimport { constructSwapSDK } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n};\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n\n  return { swap, limitOrders, nftOrders };\n};\n","import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n} from '../types';\n\nimport type { EthersProviderDeps } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from './full';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n};\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n};\n\nexport type FetcherOptions =\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch };\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (EthersProviderDeps | { web3: Web3 }) & {\n  account: Address;\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher =\n    'axios' in options\n      ? constructAxiosFetcher(options.axios)\n      : constructFetchFetcher(options.fetch);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    return { swap, limitOrders, nftOrders };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  return { swap, limitOrders, nftOrders };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersContractCaller(providerOptions, providerOptions.account);\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', resolve);\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","API_URL","ethersContractHasMethods","contract","_len","arguments","methods","Array","_key","every","assertEthersContractHasMethods","_len2","_key2","assert","apply","join","web3ContractHasMethods","_len3","_key3","assertWeb3ContractHasMethods","_len4","_key4","constructSearchString","queryOptions","queryEntries","entries","filter","_ref","map","_ref2","String","queryString","URLSearchParams","toString","isFetcherError","FetcherError","_Error","_ref3","_this","code","request","response","isAxiosError","message","status","captureStackTrace","_assertThisInitialized","data","isDataWithError","isFilledArray","array","getRandomInt","Math","floor","random","Number","MAX_SAFE_INTEGER","constructGetSpender","func","_ref$apiURL","apiURL","fetcher","fetchURL","chainId","_getContracts","_asyncToGenerator","_regeneratorRuntime","signal","_context","url","_callee","_x","getContracts","_result","getSpender","_context2","TokenTransferProxy","_callee2","_x2","getAugustusSwapper","_ref4","_context3","AugustusSwapper","_callee3","_x3","getAugustusRFQ","_ref5","_context4","AugustusRFQ","_callee4","_x4","MinERC20Abi","constant","inputs","outputs","payable","stateMutability","approveTokenMethodFactory","contractCaller","amount","tokenAddress","overrides","spender","transactCall","address","abi","contractMethod","args","PricingMethod","constructApproveToken","options","approveToken","approveTokenBulk","tokenAddresses","all","constructToken","tokenProps","tokenType","_tokenProps$tokenType","mainConnector","_tokenProps$mainConne","connectors","connectorsInput","_tokenProps$connector","network","_tokenProps$network","rest","_excluded","_extends","NOT_FOUND_RESPONSE","constructGetBalances","tokensUrl","getBalances","userAddress","tokens","getBalance","tokenAddressOrSymbol","token","_x5","getAllowances","tokenAddressesLowercaseSet","allowances","Set","toLowerCase","has","_ref5$allowance","allowance","_x6","_x7","_x8","getAllowance","_ref6","balanceOrNotFound","_balanceOrNotFound$al","_x9","_x10","_x11","constructGetAdapters","_getAdapters","query","namesOnly","getAdapters","constructGetRate","pricesUrl","getRate","srcToken","destToken","parsedOptions","search","_objectWithoutPropertiesLoose","commonGetRateOptionsGetter","priceRoute","getRateByRoute","route","_route","_excluded2","_ref6$options","restInput","_excluded3","excludePricingMethods","excludeContractMethods","includeContractMethods","adapterVersion","partner","_options$partner","includeDEXS","excludeDEXS","excludePools","restOptions","_excluded4","_map","version","constructGetTokens","getTokens","baseFetchUrlGetterFactory","orderKind","orderURLpart","sanitizeOrderData","nonceAndMeta","expiry","makerAsset","takerAsset","maker","taker","makerAmount","takerAmount","constructBaseFetchUrlGetter","ZERO_ADDRESS","OrderNFT","buildOrderData","verifyingContract","_ref$nonce","nonce","_makerAssetAddress","_takerAssetAddress","makerAssetId","_ref$takerAssetId","takerAssetId","makerAssetType","takerAssetType","AugustusAddress","_ref$taker","BigInt","assetAddressToUint","types","domain","assetAddress","assetType","_makerAsset","_takerAsset","startsWith","constructBuildTx","transactionsURL","buildTx","params","side","AmountMistmatchError","sanitizedParams","fetchParams","SwapSide","SELL","areAmountsCorrect","queryParams","orders","order","sanitizedOrder","sanitizeNFTOrderData","sanitizeLimitOrderData","signature","permitMakerAsset","slippage","BUY","destAmount","srcAmount","Order","takerInNonce","constructBuildLimitOrder","buildLimitOrder","buildLimitOrderParams","_yield$getContracts","constructSignLimitOrder","signLimitOrder","typedData","typedDataOnly","signTypedDataCall","MinAugustusRFQAbi","internalType","constructCancelLimitOrder","cancelLimitOrder","orderHash","cancelLimitOrderBulk","orderHashes","constructGetLimitOrders","getBaseFetchURLByOrderType","getLimitOrders","userParams","baseFetchURL","userURL","offset","limit","hideSmallBalances","getLimitOrderByHash","constructPostLimitOrder","postTypedOrder","limitOrderWithSignatureAndPermit","postLimitOrder","postP2POrder","constructApproveTokenForLimitOrder","approveMakerTokenForLimitOrder","approveTakerTokenForLimitOrder","constructGetLimitOrdersContract","getLimitOrdersContract","getTokenTransferProxy","constructBuildLimitOrderTx","buildSwapTx","getSwapAndLimitOrderRate","getLimitOrdersRate","_ref2$options","_options","_checkAndParseOrders","totalTakerAmount","takerAmountString","rateInput","checkAndParseOrders","ContractMethod","simpleBuy","buildLimitOrderTx","_checkAndParseOrders2","fillParams","buildSwapAndLimitOrderTx","_checkAndParseOrders3","destDecimals","reduce","accum","takerAssetsSet","add","makerAssetsSet","size","_orders$","constructBuildNFTOrder","buildNFTOrder","buildNFTOrderParams","constructSignNFTOrder","signNFTOrder","constructCancelNFTOrder","cancelNFTOrder","cancelNFTOrderBulk","constructGetNFTOrders","getNFTOrders","getNFTOrderByHash","constructPostNFTOrder","NFTOrderWithSignatureAndPermit","postNFTLimitOrder","postNFTP2POrder","constructGetNFTOrdersContract","getNFTOrdersContract","MinNFTAbi","constructApproveTokenForNFTOrder","approveERC20ForNFTOrder","approveNFTorNFTOrder","constructBuildNFTOrderTx","getSwapAndNFTOrderRate","getNFTOrdersRate","buildNFTOrderTx","buildSwapAndNFTOrderTx","uintToAssetAddress","assetUint","constructFetcher","axios","t0","fetch","body","headers","JSON","stringify","json","ok","statusText","fromEntries","config","constructContractCaller","account","providerOrSigner","ethersProviderOrSigner","Contract","EthersContract","staticCall","_contract$callStatic","block","gas","restOverrides","normalizedOverrides","blockTag","gasLimit","callStatic","callOverrides","signer","txOverrides","isEthersProviderWithSigner","isEthersSigner","getSigner","isTypedDataCapableSigner","_signTypedData","_isProvider","isEthersProvider","_isSigner","web3","_contract$methods","currentProvider","eth","_contract$methods2","from","_from","preparedCall","promiEvent","unpromiEvent","send","on","bind","once","provider","_typedData","isProviderWithSendMethod","EIP712Domain","primaryType","findPrimaryType","jsonrpc","baseTypeRegex","candidates","candidatesSet","candidate","typedDataFields","_type$match","baseType","match","constructPartialSDK","funcs","sdkFuncs","sdkSlice","assign","constructSwapSDK","constructSubmitLimitOrder","prepareLimitOrder","extra","orderData","orderWithSignature","submitLimitOrder","submitP2POrder","constructAllLimitOrdersHandlers","constructSubmitNFTOrder","prepareNFTOrder","submitNFTOrder","constructAllNFTOrdersHandlers","ParaSwap","_ref$chainId","web3Provider","ethersDeps","sdk","constructAxiosFetcher","constructFetchFetcher","constructEthersContractCaller","constructWeb3ContractCaller","handleAPIError","e","extractHashFromTxResponse","_extractHashFromTxResponse","txResponse","hash","_proto","setWeb3Provider","setEthersProvider","_getTokens","_getRateByRoute","srcDecimals","_getRate","_context5","_callee5","_x12","_x13","_x14","_x15","_x16","_buildTx","partnerAddress","partnerFeeBps","receiver","permit","deadline","_context6","_callee6","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_getTokenTransferProxy","_provider","_context7","_callee7","_x32","_getAllowances","_callee8","_context8","_x33","_x34","_getAllowance","_callee9","_context9","_x35","_x36","_approveTokenBulk","txResponses","_context10","_callee10","_x37","_x38","_x39","_x40","_approveToken","sendOptions","_context11","_callee11","_x41","_x42","_x43","_x44","_x45","getMarketNames","_getMarketNames","_callee12","_context12","_getBalance","_callee13","_context13","_x46","_x47","_getBalances","_context14","_callee14","_x48","ERC20","ERC1155","ERC721","swap","limitOrders","nftOrders","providerOptions","_constructEthersContr","_transactCall","contractTx","constructSimpleContractCaller"],"mappings":"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"}