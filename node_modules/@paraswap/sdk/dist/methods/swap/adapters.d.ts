import type { ConstructFetchInput } from '../../types';
declare type Adapter = {
    adapter: string;
    index: number;
};
declare type AdaptersAsObject = Record<string, Adapter[]>;
declare type AdaptersAsList = {
    name: string;
    adapters: Adapter[];
}[];
declare type AdaptersAsStrings = string[];
declare type OptionsObject = {
    type: 'object';
};
declare type OptionsList = {
    type: 'list';
    namesOnly?: false;
};
declare type OptionsListNamesOnly = {
    type: 'list';
    namesOnly: true;
};
export declare type AllAdaptersOptions = OptionsObject | OptionsList | OptionsListNamesOnly;
interface GetAdaptersFunc {
    (options: OptionsObject, signal?: AbortSignal): Promise<AdaptersAsObject>;
    (options: OptionsList, signal?: AbortSignal): Promise<AdaptersAsList>;
    (options: OptionsListNamesOnly, signal?: AbortSignal): Promise<AdaptersAsStrings>;
    (options: AllAdaptersOptions, signal?: AbortSignal): Promise<AdaptersAsObject | AdaptersAsList | AdaptersAsStrings>;
}
export declare type GetAdaptersFunctions = {
    getAdapters: GetAdaptersFunc;
};
export declare const constructGetAdapters: ({ apiURL, chainId, fetcher, }: ConstructFetchInput) => GetAdaptersFunctions;
export {};
//# sourceMappingURL=adapters.d.ts.map