import type { OrderType } from './types';
declare type GetBaseFetchUrlInput = {
    apiURL: string;
    chainId: number;
};
export declare type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (params: GetBaseFetchUrlInput) => UrlByTypeFunction<Kind>;
declare type OrderType2URLPart = {
    LIMIT: 'orders';
    P2P: 'p2p';
};
declare type OrderKind = 'nft' | 'ft';
export declare type BaseFetchUrl<Kind extends OrderKind, Type extends OrderType = OrderType> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;
export declare type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;
interface UrlByTypeFunction<Kind extends OrderKind> {
    (): MinFetchUrl<Kind>;
    (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;
    (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;
    (type: OrderType): BaseFetchUrl<Kind>;
    (type?: OrderType): BaseFetchUrl<Kind> | MinFetchUrl<Kind>;
}
export declare function baseFetchUrlGetterFactory<Kind extends OrderKind>(orderKind: Kind): BaseFetchUrlInputConstructor<Kind>;
export {};
//# sourceMappingURL=misc.d.ts.map