import type { ConstructProviderFetchInput } from '../../types';
import type { LimitOrderFromApi } from './helpers/types';
import { BuildLimitOrderFunctions, BuildLimitOrderInput } from './buildOrder';
import { CancelLimitOrderFunctions } from './cancelOrder';
import { GetLimitOrdersFunctions } from './getOrders';
import { PostLimitOrderFunctions } from './postOrder';
import { SignLimitOrderFunctions } from './signOrder';
import { ApproveTokenForLimitOrderFunctions } from './approveForOrder';
import { GetLimitOrdersContractFunctions } from './getOrdersContract';
import { BuildLimitOrdersTxFunctions } from './transaction';
import { Address } from 'paraswap-core';
declare type SubmitLimitOrder = (buildLimitOrderParams: BuildLimitOrderInput, extra?: {
    permitMakerAsset?: string;
}, signal?: AbortSignal) => Promise<LimitOrderFromApi>;
declare type SubmitP2POrder = (buildLimitOrderParams: BuildLimitOrderInput & {
    taker: Address;
}, extra?: {
    permitMakerAsset?: string;
}, signal?: AbortSignal) => Promise<LimitOrderFromApi>;
export declare type SubmitLimitOrderFuncs = {
    submitLimitOrder: SubmitLimitOrder;
    submitP2POrder: SubmitP2POrder;
};
export declare const constructSubmitLimitOrder: (options: ConstructProviderFetchInput<any, 'signTypedDataCall'>) => SubmitLimitOrderFuncs;
export declare type LimitOrderHandlers<T> = SubmitLimitOrderFuncs & BuildLimitOrderFunctions & SignLimitOrderFunctions & PostLimitOrderFunctions & GetLimitOrdersFunctions & GetLimitOrdersContractFunctions & BuildLimitOrdersTxFunctions & CancelLimitOrderFunctions<T> & ApproveTokenForLimitOrderFunctions<T>;
/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */
export declare const constructAllLimitOrdersHandlers: <TxResponse>(options: ConstructProviderFetchInput<TxResponse, "signTypedDataCall" | "staticCall" | "transactCall">) => LimitOrderHandlers<TxResponse>;
export {};
//# sourceMappingURL=index.d.ts.map