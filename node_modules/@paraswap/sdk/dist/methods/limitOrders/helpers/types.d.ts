import type { OrderData } from './buildOrderData';
export declare type LimitOrderType = 'LIMIT' | 'P2P';
export declare type LimitOrder = LimitOrderFromApi;
export declare type LimitOrderToSend = OrderData & {
    permitMakerAsset?: string;
    signature: string;
};
export declare type LimitOrdersApiResponse = {
    limit: number;
    offset: number;
    total: number;
    hasMore: boolean;
    orders: LimitOrderFromApi[];
};
export declare type LimitOrderApiResponse = {
    order: LimitOrderFromApi;
};
export declare type LimitOrderState = 'DRAFT' | 'PENDING' | 'FULFILLED' | 'CANCELLED' | 'EXPIRED';
export declare type LimitOrderEvent = '';
export declare type LimitOrderTransaction = {
    hash: string;
    event_type: 'OrderFilled' | 'OrderCancelled';
};
export declare type LimitOrderFromApi = {
    chainId: number;
    nonceAndMeta: string;
    expiry: number;
    maker: string;
    taker: string;
    makerAsset: string;
    takerAsset: string;
    makerAmount: string;
    takerAmount: string;
    makerBalance: string;
    signature: string;
    permitMakerAsset: null | string;
    orderHash: string;
    createdAt: number;
    updatedAt: number;
    state: LimitOrderState;
    /** @description transaction with the last event pertaining to the order: OrderFilled or OrderCancelled */
    transactionHash: null | string;
    type: LimitOrderType;
    takerFromMeta: string;
    fillableBalance: string;
    reservedBalance: string;
    swappableBalance: string;
};
//# sourceMappingURL=types.d.ts.map