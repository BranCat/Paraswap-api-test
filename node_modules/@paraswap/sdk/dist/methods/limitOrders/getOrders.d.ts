import type { Address, ConstructFetchInput } from '../../types';
import type { LimitOrderFromApi, LimitOrdersApiResponse, LimitOrderType } from './helpers/types';
interface PaginationParams {
    limit?: number;
    offset?: number;
    hideSmallBalances?: boolean;
}
export declare type LimitOrdersUserParams = ({
    maker: Address;
    type: LimitOrderType;
} | {
    taker: Address;
    type: LimitOrderType;
}) & PaginationParams;
declare type GetLimitOrderByHash = (orderHash: string, signal?: AbortSignal) => Promise<LimitOrderFromApi>;
declare type GetLimitOrders = (userParams: LimitOrdersUserParams, signal?: AbortSignal) => Promise<LimitOrdersApiResponse>;
export declare type GetLimitOrdersFunctions = {
    getLimitOrders: GetLimitOrders;
    getLimitOrderByHash: GetLimitOrderByHash;
};
export declare const constructGetLimitOrders: ({ apiURL, chainId, fetcher, }: ConstructFetchInput) => GetLimitOrdersFunctions;
export {};
//# sourceMappingURL=getOrders.d.ts.map