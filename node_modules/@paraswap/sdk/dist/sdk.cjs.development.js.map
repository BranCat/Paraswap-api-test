{"version":3,"file":"sdk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/helpers/misc.ts","../src/methods/swap/spender.ts","../src/helpers/approve.ts","../src/methods/swap/approve.ts","../src/helpers/token.ts","../src/methods/swap/balance.ts","../src/methods/swap/adapters.ts","../src/methods/swap/rates.ts","../src/methods/swap/token.ts","../src/methods/common/orders/misc.ts","../src/methods/limitOrders/helpers/misc.ts","../src/methods/common/orders/buildOrderData.ts","../src/methods/nftOrders/helpers/buildOrderData.ts","../src/methods/nftOrders/helpers/misc.ts","../src/methods/swap/transaction.ts","../src/methods/limitOrders/helpers/buildOrderData.ts","../src/methods/limitOrders/buildOrder.ts","../src/methods/limitOrders/signOrder.ts","../src/methods/limitOrders/cancelOrder.ts","../src/methods/limitOrders/getOrders.ts","../src/methods/limitOrders/postOrder.ts","../src/methods/limitOrders/approveForOrder.ts","../src/methods/limitOrders/getOrdersContract.ts","../src/methods/limitOrders/transaction.ts","../src/methods/nftOrders/buildOrder.ts","../src/methods/nftOrders/signOrder.ts","../src/methods/nftOrders/cancelOrder.ts","../src/methods/nftOrders/getOrders.ts","../src/methods/nftOrders/postOrder.ts","../src/methods/nftOrders/getOrdersContract.ts","../src/methods/nftOrders/approveForOrder.ts","../src/methods/nftOrders/transaction.ts","../src/helpers/fetchers/axios.ts","../src/helpers/fetchers/fetch.ts","../src/helpers/providers/ethers.ts","../src/helpers/providers/web3.ts","../src/sdk/partial.ts","../src/methods/swap/index.ts","../src/methods/limitOrders/index.ts","../src/methods/nftOrders/index.ts","../src/sdk/full.ts","../src/sdk/simple.ts","../src/legacy/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export { SwapSide, ContractMethod } from 'paraswap-core';\n\nexport const API_URL = 'https://api.paraswap.io';\n","import type {\n  Contract as EthersContract,\n  ContractFunction as EthersContractFunction,\n  PopulatedTransaction as EthersPopulatedTransaction,\n  BigNumber as EthersBigNumber,\n} from 'ethers';\nimport type {\n  ContractSendMethod as Web3ContractSendMethod,\n  Contract as Web3Contract,\n} from 'web3-eth-contract';\nimport { assert, Primitive } from 'ts-essentials';\n\nimport type { AxiosError } from 'axios';\n\nexport type EthersContractWithMethod<T extends string> = EthersContract & {\n  readonly [method in T]: EthersContractFunction;\n} & {\n  readonly functions: { [method in T]: EthersContractFunction };\n\n  readonly callStatic: { [method in T]: EthersContractFunction };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunction<EthersBigNumber>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunction<EthersPopulatedTransaction>;\n  };\n};\n\nexport function ethersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): contract is EthersContractWithMethod<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nexport function assertEthersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethod<T> {\n  assert(\n    ethersContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport type Web3ContractWithMethod<T extends string> = Web3Contract & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nexport function web3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nexport function assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n//                                                            not arrays or mappings\nexport const constructSearchString = <U extends Record<string, Primitive>>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype FetcherErrorConstructorInput = Pick<\n  AxiosError,\n  'code' | 'request' | 'response' | 'isAxiosError' | 'message'\n>;\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n","import { API_URL } from '../../constants';\nimport { runOnceAndCache } from '../../helpers/misc';\nimport type { ConstructFetchInput, Address } from '../../types';\n\nexport type GetSpender = (signal?: AbortSignal) => Promise<Address>;\ntype GetContracts = (signal?: AbortSignal) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\ninterface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const fetchURL = `${apiURL}/adapters/contracts?network=${chainId}`;\n\n  const _getContracts: GetContracts = async (signal) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (signal) => {\n    const { TokenTransferProxy } = await getContracts(signal);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (signal) => {\n    const { AugustusSwapper } = await getContracts(signal);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (signal) => {\n    const { AugustusRFQ } = await getContracts(signal);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  signal?: AbortSignal\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, signal) => {\n    const spender = await getSpender(signal);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n","import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    signal\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, signal)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n","import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = string;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n","import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  signal?: AbortSignal\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  signal?: AbortSignal\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  signal?: AbortSignal\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  signal?: AbortSignal\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}`;\n\n  const getBalances: GetBalances = async (userAddress, signal) => {\n    const fetchURL = `${tokensUrl}/${userAddress}`;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    signal\n  ) => {\n    const fetchURL = `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}`;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    signal\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, signal);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    signal\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      signal\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL } from '../../constants';\n\ntype Adapter = {\n  adapter: string;\n  index: number;\n};\n\ntype AdaptersAsObject = Record<string, Adapter[]>;\ntype AdaptersAsList = { name: string; adapters: Adapter[] }[];\ntype AdaptersAsStrings = string[];\n\ntype OptionsObject = { type: 'object' };\ntype OptionsList = { type: 'list'; namesOnly?: false };\ntype OptionsListNamesOnly = { type: 'list'; namesOnly: true };\n\nexport type AllAdaptersOptions =\n  | OptionsObject\n  | OptionsList\n  | OptionsListNamesOnly;\n\ninterface GetAdaptersFunc {\n  (options: OptionsObject, signal?: AbortSignal): Promise<AdaptersAsObject>;\n  (options: OptionsList, signal?: AbortSignal): Promise<AdaptersAsList>;\n  (\n    options: OptionsListNamesOnly,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsStrings>;\n  (options: AllAdaptersOptions, signal?: AbortSignal): Promise<\n    AdaptersAsObject | AdaptersAsList | AdaptersAsStrings\n  >;\n}\n\nexport type GetAdaptersFunctions = {\n  getAdapters: GetAdaptersFunc;\n};\n\ntype SearchStringParams = {\n  network: number;\n  namesOnly?: boolean;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  async function getAdapters(\n    options: OptionsObject,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject>;\n  async function getAdapters(\n    options: OptionsList,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsList>;\n  async function getAdapters(\n    options: OptionsListNamesOnly,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsStrings>;\n  async function getAdapters(\n    options: AllAdaptersOptions,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject | AdaptersAsList | AdaptersAsStrings>;\n  async function getAdapters(\n    options: AllAdaptersOptions,\n    signal?: AbortSignal\n  ): Promise<AdaptersAsObject | AdaptersAsList | AdaptersAsStrings> {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      namesOnly:\n        !!options && 'namesOnly' in options ? options.namesOnly : undefined,\n    });\n\n    const fetchURL = `${apiURL}/adapters${\n      options?.type === 'list' ? '/list' : ''\n    }${query}`;\n\n    const data = await fetcher<\n      AdaptersAsObject | AdaptersAsList | AdaptersAsStrings\n    >({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  }\n\n  return { getAdapters };\n};\n","import { SwapSide, ContractMethod, API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n} from '../../types';\n\n// TODO: This is legacy and can be removed\nexport enum PricingMethod {\n  megapath = 'megapath',\n  multipath = 'multipath',\n  simplepath = 'simplepath',\n}\n\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludePricingMethods?: PricingMethod[];\n  excludeContractMethods?: ContractMethod[];\n  includeContractMethods?: ContractMethod[];\n  adapterVersion?: string;\n  partner?: string;\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: SwapSide;\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\n\nconst DEFAULT_PARTNER = 'paraswap.io';\n\nconst INVALID_ROUTE = 'Invalid Route';\n\ntype SearchStringParams = CommonGetRateResult & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n  network: number;\n};\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices`;\n\n  const getRate: GetRate = async ({ srcToken, destToken, ...rest }, signal) => {\n    const parsedOptions = commonGetRateOptionsGetter(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>({\n      srcToken,\n      destToken,\n      network: chainId,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}`;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async ({ route, ...rest }, signal) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = commonGetRateOptionsGetter(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString({\n      route: _route,\n      network: chainId,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}`;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n\ntype CommonGetRateResult = {\n  amount: string;\n  side?: SwapSide;\n  excludeDEXS?: string;\n  includeDEXS?: string;\n  excludePools?: string;\n  version?: string;\n  excludePricingMethods?: string;\n  excludeContractMethods?: string;\n  includeContractMethods?: string;\n  srcDecimals?: number;\n  destDecimals?: number;\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  userAddress?: string;\n  partner: string;\n  otherExchangePrices?: boolean;\n};\nfunction commonGetRateOptionsGetter({\n  options = {},\n  ...restInput\n}: CommonGetRateInput): CommonGetRateResult {\n  const {\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    adapterVersion,\n    partner = DEFAULT_PARTNER,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludePricingMethods,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  return {\n    version: adapterVersion,\n    excludePricingMethods: _excludePricingMethods,\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n    ...restInput,\n    ...restOptions,\n  };\n}\n","import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (signal?: AbortSignal) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}`;\n\n  const getTokens: GetTokens = async (signal) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n","import type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type?: OrderType): BaseFetchUrl<Kind> | MinFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType\n    ): BaseFetchUrl<Kind> | MinFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n","import type {\n  TypedDataDomain as EthersTypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\n\nexport const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = Omit<EthersTypedDataDomain, 'chainId'> & {\n  chainId: number;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n","import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n","import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gasPrice: string;\n  gas?: string;\n  chainId: number;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  ignoreChecks?: boolean;\n  ignoreGasEstimate?: boolean;\n  onlyParams?: boolean;\n  simple?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}`;\n\n  const buildTx: BuildTx = async (params, options = {}, signal) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMistmatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMistmatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}`;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order || 'takerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      signal,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n","import { getRandomInt } from '../../../helpers/misc';\nimport type { Address } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n  // otherwise p2p order -> fill through Augustus only\n  const taker = takerInNonce === ZERO_ADDRESS ? ZERO_ADDRESS : AugustusAddress;\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    signal\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole ERC20_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n","// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ninterface PaginationParams {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n}\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<LimitOrdersApiResponse>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances } = userParams;\n    const search = constructSearchString({ offset, limit, hideSmallBalances });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    signal\n  ) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  // network, @TODO would it make more sense to post by network?\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    signal?: AbortSignal\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n","import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide, ContractMethod } from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (params, options, signal) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (buildNFTOrderParams, signal) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructCancelLimitOrder } from '../limitOrders/cancelOrder';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (orderHash, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    signal?: AbortSignal\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n","import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTorNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n  const AugustusRFQ = getNFTOrdersContract();\n\n  const approveNFTorNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {}\n  ) => {\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTorNFTOrder };\n};\n","import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide, ContractMethod } from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (params, options, signal) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n","import type { FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement): FetcherFunction =>\n  async (params) => {\n    try {\n      const { data } = await axios.request(params);\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n","import type { FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, signal } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      const headers =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      const response = await fetch(url, { method, body, signal, headers });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n","import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersContract,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\nimport { assertEthersContractHasMethods } from '../misc';\nimport { assert } from 'ts-essentials';\n\nexport interface EthersProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency even when using legacy ParaSwap class\n}\n\nexport const constructContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type Web3 from 'web3';\nimport type { AbiItem } from 'web3-utils';\nimport type {\n  ContractSendMethod,\n  SendOptions,\n  CallOptions,\n  Contract,\n} from 'web3-eth-contract';\nimport type { PromiEvent, provider, AbstractProvider } from 'web3-core';\nimport type { JsonRpcResponse } from 'web3-core-helpers';\nimport { assert } from 'ts-essentials';\nimport { assertWeb3ContractHasMethods } from '../misc';\nimport type { TypedDataField } from '@ethersproject/abstract-signer';\n\nexport type Web3UnpromiEvent = Pick<PromiEvent<Contract>, 'on' | 'once'>;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas,\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas,\n    };\n\n    const preparedCall = contract.methods[contractMethod](\n      ...args\n    ) as ContractSendMethod;\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const provider = web3.currentProvider;\n    assert(\n      isProviderWithSendMethod(provider),\n      'web3.currentProvider needs to be capable of sending arbitrary rpc calls'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    const response = await new Promise<JsonRpcResponse>((resolve, reject) => {\n      provider.send(\n        {\n          jsonrpc: '2.0',\n          // method: 'eth_signTypedData_v4',\n          method: 'eth_signTypedData',\n          params: [account, _typedData],\n        },\n        (error, result) => {\n          if (error) return reject(error);\n          if (!result) {\n            throw new Error('No result in response to eth_signTypedData');\n          }\n          resolve(result);\n        }\n      );\n    });\n\n    return response.result;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isProviderWithSendMethod<T extends provider>(\n  provider: T\n): provider is T & Required<Pick<AbstractProvider, 'send'>> {\n  return !!provider && typeof provider === 'object' && 'send' in provider;\n}\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nfunction findPrimaryType(types: Record<string, TypedDataField[]>): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n","import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [head: infer Head, ...tail: infer Tail]\n  ? Tail extends Record<string, any>[]\n    ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n    : MergeExtendableOnce<Accum, Head>\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  return sdkFuncs as PartialSDKResult<Config, Funcs>;\n};\n","import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { ConstructProviderFetchInput } from '../../types';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> =>\n  // include all available Swap methods\n  constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveToken as (\n      options: ConstructProviderFetchInput<TxResponse, 'transactCall'>\n    ) => ApproveTokenFunctions<TxResponse>, // @TODO try Instantiation Expression when TS 4.7 `as constructApproveToken<TxResponse>`\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate\n  );\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport { Address } from 'paraswap-core';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersBuildTx,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n","import type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { GetBalancesFunctions } from '../methods/swap/balance';\nimport type { GetSpenderFunctions } from '../methods/swap/spender';\nimport type { GetAdaptersFunctions } from '../methods/swap/adapters';\nimport type { GetRateFunctions } from '../methods/swap/rates';\nimport type { GetTokensFunctions } from '../methods/swap/token';\nimport type { BuildTxFunctions } from '../methods/swap/transaction';\nimport type { SDKConfig } from './partial';\nimport { constructSwapSDK } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n};\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n\n  return { swap, limitOrders, nftOrders };\n};\n","import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n} from '../types';\n\nimport type { EthersProviderDeps } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from './full';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n};\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n};\n\nexport type FetcherOptions =\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch };\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (EthersProviderDeps | { web3: Web3 }) & {\n  account: Address;\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher =\n    'axios' in options\n      ? constructAxiosFetcher(options.axios)\n      : constructFetchFetcher(options.fetch);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    return { swap, limitOrders, nftOrders };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  return { swap, limitOrders, nftOrders };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersContractCaller(providerOptions, providerOptions.account);\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', resolve);\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n","import type Web3 from 'web3';\nimport type { SendOptions } from 'web3-eth-contract';\nimport type { ContractTransaction } from '@ethersproject/contracts';\n\nimport { API_URL, SwapSide } from '../constants';\nimport {\n  SwapSDKMethods,\n  constructBuildTx,\n  constructGetAdapters,\n  constructGetBalances,\n  constructGetSpender,\n  constructGetTokens,\n  constructPartialSDK,\n  constructGetRate,\n  constructSwapSDK,\n  PriceString,\n  Address,\n  OptimalRate,\n} from '..';\nimport { assert } from 'ts-essentials';\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n  isFetcherError,\n  Web3UnpromiEvent,\n  EthersProviderDeps,\n} from '../helpers';\n\nimport type { RateOptions } from '../methods/swap/rates';\nimport type {\n  BuildOptions,\n  TransactionParams,\n} from '../methods/swap/transaction';\nimport type { AddressOrSymbol, Token, FetcherFunction } from '../types';\nimport type { Allowance } from '../methods/swap/balance';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { isDataWithError } from '../helpers/misc';\n\nexport type APIError = {\n  message: string;\n  status?: number;\n  data?: any;\n};\ntype Fetch = typeof fetch;\n\ntype TxResponse = Web3UnpromiEvent | ContractTransaction;\n\ntype LegacyOptions = {\n  chainId?: number;\n  apiURL?: string;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n  axios?: AxiosRequirement;\n  fetch?: Fetch;\n};\n\n/** @deprecated */\nexport class ParaSwap {\n  sdk: Partial<SwapSDKMethods<TxResponse>> = {};\n  fetcher: FetcherFunction;\n\n  chainId: number;\n  apiURL: string;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n\n  constructor({\n    chainId = 1,\n    apiURL = API_URL,\n    web3Provider,\n    ethersDeps,\n    account,\n    axios,\n    fetch,\n  }: LegacyOptions) {\n    this.chainId = chainId;\n    this.apiURL = apiURL;\n    this.web3Provider = web3Provider;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    const fetcher = axios\n      ? constructAxiosFetcher(axios)\n      : fetch\n      ? constructFetchFetcher(fetch)\n      : null;\n\n    assert(fetcher, 'at least one fetcher is needed');\n    this.fetcher = fetcher;\n\n    if (!web3Provider && !ethersDeps) {\n      this.sdk = constructPartialSDK(\n        { fetcher, apiURL, chainId },\n        constructGetBalances,\n        constructGetTokens,\n        constructGetSpender,\n        constructBuildTx,\n        constructGetAdapters,\n        constructGetRate\n      );\n\n      return;\n    }\n\n    const contractCaller = ethersDeps\n      ? constructEthersContractCaller(ethersDeps, account)\n      : web3Provider\n      ? constructWeb3ContractCaller(web3Provider, account)\n      : null;\n\n    if (contractCaller) {\n      this.sdk = constructSwapSDK<TxResponse>({\n        fetcher,\n        contractCaller,\n        apiURL,\n        chainId,\n      });\n    }\n  }\n\n  private static handleAPIError(e: unknown): APIError {\n    // @CONSIDER if some errors should not be replaced\n    if (!isFetcherError(e)) {\n      return { message: `Unknown error: ${e}` };\n    }\n\n    if (!e.response) {\n      return { message: e.message };\n    }\n\n    const { status, data } = e.response;\n\n    return {\n      status,\n      message: isDataWithError(data) ? data.error : e.message,\n      data,\n    };\n  }\n\n  private static async extractHashFromTxResponse(\n    txResponse: TxResponse\n  ): Promise<string> {\n    if ('once' in txResponse) {\n      return new Promise<string>((resolve, reject) => {\n        txResponse.once('transactionHash', resolve);\n        txResponse.once('error', reject);\n      });\n    }\n\n    const { hash } = await txResponse;\n    return hash;\n  }\n\n  setWeb3Provider(web3Provider: Web3, account?: string): this {\n    const contractCaller = constructWeb3ContractCaller(web3Provider, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      chainId,\n    });\n\n    this.web3Provider = web3Provider;\n    this.ethersDeps = undefined;\n    this.account = account;\n\n    return this;\n  }\n\n  setEthersProvider(ethersDeps: EthersProviderDeps, account?: string): this {\n    const contractCaller = constructEthersContractCaller(ethersDeps, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      chainId,\n    });\n\n    this.web3Provider = undefined;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    return this;\n  }\n\n  // @CONSIDER I still think there's no need for a class Token\n  async getTokens(): Promise<Token[] | APIError> {\n    assert(this.sdk.getTokens, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getTokens();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAdapters() {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters({ type: 'object' });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRateByRoute(\n    route: AddressOrSymbol[],\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options?: RateOptions,\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRateByRoute, 'sdk must be initialized with a fetcher');\n    if (route.length < 2) {\n      return { message: 'Invalid Route' };\n    }\n\n    try {\n      return await this.sdk.getRateByRoute({\n        route,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      // @TODO this overrides any non FetchError,\n      // including Error('Invalid DEX list')\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRate(\n    srcToken: AddressOrSymbol,\n    destToken: AddressOrSymbol,\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options: RateOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRate, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getRate({\n        srcToken,\n        destToken,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async buildTx(\n    srcToken: Address,\n    destToken: Address,\n    srcAmount: PriceString,\n    destAmount: PriceString,\n    priceRoute: OptimalRate,\n    userAddress: Address,\n    partner?: string,\n    partnerAddress?: string,\n    partnerFeeBps?: number,\n    receiver?: Address,\n    options: BuildOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number,\n    permit?: string,\n    deadline?: string\n  ): Promise<TransactionParams | APIError> {\n    assert(this.sdk.buildTx, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.buildTx(\n        {\n          srcToken,\n          destToken,\n          srcAmount,\n          destAmount,\n          priceRoute,\n          userAddress,\n          partner,\n          partnerAddress,\n          partnerFeeBps,\n          receiver,\n          srcDecimals,\n          destDecimals,\n          permit,\n          deadline,\n        },\n        options\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getTokenTransferProxy(_provider?: any): Promise<Address | APIError> {\n    assert(this.sdk.getSpender, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getSpender();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowances(\n    userAddress: Address,\n    tokenAddresses: Address[]\n  ): Promise<Allowance[] | APIError> {\n    assert(this.sdk.getAllowances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowances(userAddress, tokenAddresses);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowance(\n    userAddress: Address,\n    tokenAddress: Address\n  ): Promise<Allowance | APIError> {\n    assert(this.sdk.getAllowance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowance(userAddress, tokenAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveTokenBulk(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddresses: Address[],\n    /** @deprecated */\n    _provider?: any // not used, can't detect if Ethers or Web3 provider without importing them\n  ): Promise<string[] | APIError> {\n    // @TODO expand sendOptions\n    assert(\n      this.sdk.approveTokenBulk,\n      'sdk must be initialized with a provider'\n    );\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponses = await this.sdk.approveTokenBulk(\n        amount,\n        tokenAddresses\n      );\n\n      return await Promise.all(\n        txResponses.map(ParaSwap.extractHashFromTxResponse)\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveToken(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddress: Address,\n    /** @deprecated */\n    _provider?: any, // not used, can't detect if Ethers or Web3 provider without importing them\n    sendOptions?: Omit<SendOptions, 'from'>\n  ): Promise<string | APIError> {\n    // @TODO expand sendOptions\n    assert(this.sdk.approveToken, 'sdk must be initialized with a provider');\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponse = await this.sdk.approveToken(amount, tokenAddress);\n\n      return await ParaSwap.extractHashFromTxResponse(txResponse);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getMarketNames(): Promise<string[] | APIError> {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters({ type: 'list', namesOnly: true });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalance(\n    userAddress: Address,\n    token: AddressOrSymbol\n  ): Promise<Token | APIError> {\n    assert(this.sdk.getBalance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalance(userAddress, token);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalances(userAddress: Address): Promise<Token[] | APIError> {\n    assert(this.sdk.getBalances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalances(userAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n}\n"],"names":["undefined","API_URL","ethersContractHasMethods","contract","methods","every","method","assertEthersContractHasMethods","assert","join","web3ContractHasMethods","assertWeb3ContractHasMethods","objectToFilledEntries","object","Object","entries","filter","value","map","key","String","constructSearchString","queryOptions","queryEntries","queryString","URLSearchParams","toString","isFetcherError","error","FetcherError","code","request","response","isAxiosError","message","status","Error","captureStackTrace","name","constructor","data","isDataWithError","isObject","obj","isFilledArray","array","length","getRandomInt","Math","floor","random","Number","MAX_SAFE_INTEGER","runOnceAndCache","func","result","constructGetSpender","apiURL","chainId","fetcher","fetchURL","_getContracts","signal","url","getContracts","getSpender","TokenTransferProxy","getAugustusSwapper","AugustusSwapper","getAugustusRFQ","AugustusRFQ","MinERC20Abi","constant","inputs","type","outputs","payable","stateMutability","approveTokenMethodFactory","contractCaller","amount","tokenAddress","overrides","spender","transactCall","address","abi","contractMethod","args","res","constructApproveToken","options","approveToken","approveTokenBulk","tokenAddresses","Promise","all","constructToken","tokenProps","tokenType","mainConnector","connectors","connectorsInput","network","rest","_excluded","isAllowance","arg","NOT_FOUND_RESPONSE","constructGetBalances","tokensUrl","getBalances","userAddress","tokens","getBalance","tokenAddressOrSymbol","token","getAllowances","tokenAddressesLowercaseSet","Set","toLowerCase","balances","allowances","has","allowance","getAllowance","balanceOrNotFound","constructGetAdapters","getAdapters","query","namesOnly","PricingMethod","DEFAULT_PARTNER","INVALID_ROUTE","constructGetRate","pricesUrl","getRate","srcToken","destToken","parsedOptions","commonGetRateOptionsGetter","search","priceRoute","getRateByRoute","route","_excluded2","_route","restInput","excludePricingMethods","excludeContractMethods","includeContractMethods","adapterVersion","partner","includeDEXS","excludeDEXS","excludePools","restOptions","_includeDEXS","_excludeDEXS","_excludePools","_excludePricingMethods","_excludeContractMethods","_includeContractMethods","version","constructGetTokens","getTokens","baseFetchUrlGetterFactory","orderKind","constructBaseFetchUrlGetter","urlGetter","orderURLpart","sanitizeOrderData","nonceAndMeta","expiry","makerAsset","takerAsset","maker","taker","makerAmount","takerAmount","ZERO_ADDRESS","OrderNFT","buildOrderData","verifyingContract","nonce","_makerAssetAddress","_takerAssetAddress","makerAssetId","takerAssetId","makerAssetType","takerAssetType","AugustusAddress","takerInNonce","BigInt","assetAddressToUint","orderNFT","types","domain","assetAddress","assetType","AssetType","ERC20","ERC1155","ERC721","_makerAsset","_takerAsset","startsWith","constructBuildTx","transactionsURL","buildTx","params","side","AmountMistmatchError","SwapSide","SELL","areAmountsCorrect","queryParams","sanitizedParams","orders","order","sanitizedOrderData","sanitizeNFTOrderData","sanitizeLimitOrderData","sanitizedOrder","signature","permitMakerAsset","fetchParams","builtTx","slippage","BUY","destAmount","srcAmount","inputAmount","priceRouteAmount","Order","constructBuildLimitOrder","buildLimitOrder","buildLimitOrderParams","constructSignLimitOrder","signLimitOrder","typedData","typedDataOnly","signTypedDataCall","MinAugustusRFQAbi","internalType","constructCancelLimitOrder","cancelLimitOrder","orderHash","cancelLimitOrderBulk","orderHashes","constructGetLimitOrders","getBaseFetchURLByOrderType","getLimitOrders","userParams","baseFetchURL","userURL","offset","limit","hideSmallBalances","getLimitOrderByHash","constructPostLimitOrder","postTypedOrder","limitOrderWithSignatureAndPermit","newOrder","postLimitOrder","postP2POrder","constructApproveTokenForLimitOrder","approveMakerTokenForLimitOrder","approveTakerTokenForLimitOrder","constructGetLimitOrdersContract","getTokenTransferProxy","getLimitOrdersContract","constructBuildLimitOrderTx","buildSwapTx","getSwapAndLimitOrderRate","getLimitOrdersRate","_options","checkAndParseOrders","totalTakerAmount","takerAmountString","ContractMethod","simpleBuy","rateInput","optimalRate","buildLimitOrderTx","fillParams","buildSwapAndLimitOrderTx","destDecimals","reduce","accum","takerAssetsSet","add","makerAssetsSet","size","constructBuildNFTOrder","buildNFTOrder","buildNFTOrderParams","constructSignNFTOrder","signNFTOrder","constructCancelNFTOrder","cancelNFTOrder","cancelNFTOrderBulk","constructGetNFTOrders","getNFTOrders","getNFTOrderByHash","constructPostNFTOrder","NFTOrderWithSignatureAndPermit","postNFTLimitOrder","postNFTP2POrder","constructGetNFTOrdersContract","getNFTOrdersContract","MinNFTAbi","constructApproveTokenForNFTOrder","approveERC20ForNFTOrder","approveNFTorNFTOrder","constructBuildNFTOrderTx","getSwapAndNFTOrderRate","getNFTOrdersRate","buildNFTOrderTx","buildSwapAndNFTOrderTx","uintToAssetAddress","assetUint","constructFetcher","axios","fetch","body","JSON","stringify","headers","json","ok","statusText","fromEntries","config","constructContractCaller","account","providerOrSigner","ethersProviderOrSigner","Contract","EthersContract","staticCall","block","gas","restOverrides","normalizedOverrides","blockTag","gasLimit","callOverrides","callStatic","isEthersProviderWithSigner","isEthersSigner","signer","getSigner","txOverrides","txResponse","isTypedDataCapableSigner","_signTypedData","isEthersProvider","_isProvider","_isSigner","web3","currentProvider","eth","call","from","_from","preparedCall","promiEvent","send","unpromiEvent","on","bind","once","provider","isProviderWithSendMethod","_typedData","EIP712Domain","primaryType","findPrimaryType","resolve","reject","jsonrpc","baseTypeRegex","candidates","keys","candidatesSet","forEach","candidate","typedDataFields","baseType","match","Array","constructPartialSDK","funcs","sdkFuncs","sdkSlice","assign","constructSwapSDK","constructSubmitLimitOrder","prepareLimitOrder","extra","orderData","orderWithSignature","submitLimitOrder","submitP2POrder","constructAllLimitOrdersHandlers","limitOrdersGetters","limitOrdersContractGetter","limitOrdersSubmit","limitOrdersBuild","limitOrdersSign","limitOrdersPost","limitOrdersCancel","limitOrdersApproveToken","limitOrdersBuildTx","constructSubmitNFTOrder","prepareNFTOrder","submitNFTOrder","constructAllNFTOrdersHandlers","NFTOrdersGetters","NFTOrdersContractGetter","NFTOrdersSubmit","NFTOrdersBuild","NFTOrdersSign","NFTOrdersPost","NFTOrdersCancel","NFTOrdersApproveToken","NFTOrdersBuildTx","constructFullSDK","swap","limitOrders","nftOrders","constructSimpleSDK","providerOptions","constructAxiosFetcher","constructFetchFetcher","constructSimpleContractCaller","constructEthersContractCaller","_transactCall","contractTx","hash","constructWeb3ContractCaller","ParaSwap","web3Provider","ethersDeps","sdk","handleAPIError","e","extractHashFromTxResponse","setWeb3Provider","setEthersProvider","srcDecimals","partnerAddress","partnerFeeBps","receiver","permit","deadline","_provider","txResponses","sendOptions","getMarketNames"],"mappings":"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"}